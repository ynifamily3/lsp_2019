Preparing Answer data...
Grading Student's test papers..
Grading 20190001...
20190001 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190001 / 1-2.txt : Attempt #1 / 2
정규화 전
학생 : [char**envp]
정답 : [char*envp[]]
정규화 후
원본 학생 : char**envp
원본 정답 : char*envp[]
변형 학생 : **acehnprv
변형 정답 : *[]acehnprv
Attempt #2 / 2
단순비교
학생 : [char**envp]
정답 : [char**envp]
20190001 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190001 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190001 / 1-5.txt : Attempt #1 / 1
정규화 전
학생 : [geten("WARNING")]
정답 : [getenv("WARNING")]
정규화 후
원본 학생 : geten("WARNING")
원본 정답 : getenv("WARNING")
변형 학생 : geten"WARNING"(
변형 정답 : getenv"WARNING"(
20190001 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<time.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<time.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includetime.h<>
변형 정답 : #includesyswait.h/<>
20190001 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("date","date",0)
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("date","date")
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("date","date",NULL)
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("date","date",0);
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("date","date");
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("date","date",NULL);
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp("date","date",(void*)0)]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp("date","date",(void*)0)
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : 0execlpvoid"date""date",*,
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190001 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("who","who",(void*)0)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("who","who",(void*)0)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : 0execlpvoid"who""who",*,
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("who","who",(void*)0)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("who","who",(void*)0)
원본 정답 : execlp("who","who",0)
변형 학생 : 0execlpvoid"who""who",*,
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("who","who",(void*)0)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("who","who",(void*)0)
원본 정답 : execlp("who","who")
변형 학생 : 0execlpvoid"who""who",*,
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execlp("who","who",(void*)0)]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execlp("who","who",(void*)0)
원본 정답 : execlp("who","who",NULL)
변형 학생 : 0execlpvoid"who""who",*,
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execlp("who","who",(void*)0)]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execlp("who","who",(void*)0)
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : 0execlpvoid"who""who",*,
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execlp("who","who",(void*)0)]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execlp("who","who",(void*)0)
원본 정답 : execlp("who","who",0);
변형 학생 : 0execlpvoid"who""who",*,
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execlp("who","who",(void*)0)]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execlp("who","who",(void*)0)
원본 정답 : execlp("who","who");
변형 학생 : 0execlpvoid"who""who",*,
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execlp("who","who",(void*)0)]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execlp("who","who",(void*)0)
원본 정답 : execlp("who","who",NULL);
변형 학생 : 0execlpvoid"who""who",*,
변형 정답 : ;"who""who",NULL,execlp
20190001 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [(pid=getpid())==0]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : (pid=getpid())==0
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : (0===ddegiippt
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [(pid=getpid())==0]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : (pid=getpid())==0
원본 정답 : (pid=wait(&status))<0
변형 학생 : (0===ddegiippt
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [(pid=getpid())==0]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : (pid=getpid())==0
원본 정답 : (pid=wait(&status))>0
변형 학생 : (0===ddegiippt
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [(pid=getpid())==0]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : (pid=getpid())==0
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : (0===ddegiippt
변형 정답 : !*-01==adiiinpttw
20190001 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190001 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [(start=times(&tms_start))==0]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : (start=times(&tms_start))==0
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : &(0===_aaeimmrrsssstttttt
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
정규화 전
학생 : [(start=times(&tms_start))==0]
정답 : [(start=times(&tms_start))<0]
정규화 후
원본 학생 : (start=times(&tms_start))==0
원본 정답 : (start=times(&tms_start))<0
변형 학생 : &(0===_aaeimmrrsssstttttt
변형 정답 : starttimes&tms_start(=0<
20190001 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [(end=times(&tms_end))==0]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : (end=times(&tms_end))==0
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : &(0===_ddeeeimmnnsstt
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
정규화 전
학생 : [(end=times(&tms_end))==0]
정답 : [(end=times(&tms_end))<0]
정규화 후
원본 학생 : (end=times(&tms_end))==0
원본 정답 : (end=times(&tms_end))<0
변형 학생 : &(0===_ddeeeimmnnsstt
변형 정답 : endtimes&tms_end(=0<
20190001 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190001 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190001 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190001 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190001 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190001 / 5-3.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
20190001 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190001 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190001 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190001 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190001 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190001 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190001 / 7-1.txt : Attempt #1 / 2
정규화 전
학생 : [STDIN_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
정규화 후
원본 학생 : STDIN_FILENO,O_NONBLOCK
원본 정답 : STDOUT_FILENO,O_NONBLOCK
변형 학생 : STDIN_FILENOO_NONBLOCK,
변형 정답 : STDOUT_FILENOO_NONBLOCK,
Attempt #2 / 2
정규화 전
학생 : [STDIN_FILENO,O_NONBLOCK]
정답 : [1,O_NONBLOCK]
정규화 후
원본 학생 : STDIN_FILENO,O_NONBLOCK
원본 정답 : 1,O_NONBLOCK
변형 학생 : STDIN_FILENOO_NONBLOCK,
변형 정답 : 1O_NONBLOCK,
20190001 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01===EFFGLT_acdffllntv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
20190001 / 7-3.txt : Attempt #1 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val|=flags]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val|=flags
변형 학생 : valO_NONBLOCK|=
변형 정답 : valflags|=
Attempt #2 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val=val|flags]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val=val|flags
변형 학생 : valO_NONBLOCK|=
변형 정답 : valaafgllsv|=
Attempt #3 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val|=flags;]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val|=flags;
변형 학생 : valO_NONBLOCK|=
변형 정답 : valflags;|=
Attempt #4 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val=val|flags;]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val=val|flags;
변형 학생 : valO_NONBLOCK|=
변형 정답 : val;aafgllsv|=
20190001 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,val)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1==EFFLST_acdffllntv
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
20190001 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags)
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags;&=
Attempt #5 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;aafgllsv~=
Attempt #6 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags);]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags);
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;afgls~=val
20190001 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190001 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [(flag=fcntl(fd1,F_SETFD,0))==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : (flag=fcntl(fd1,F_SETFD,0))==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : ,,-011===DEFFST_acdfffgllnt
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
정규화 전
학생 : [(flag=fcntl(fd1,F_SETFD,0))==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정규화 후
원본 학생 : (flag=fcntl(fd1,F_SETFD,0))==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
변형 학생 : ,,-011===DEFFST_acdfffgllnt
변형 정답 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
20190001 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190001 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190001 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190001 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190001 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190001 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190001 / 9-5.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SOG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SOG_BLOCK,&sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL)
변형 학생 : SOG_BLOCK&sig_set,NULL,sigprocmask
변형 정답 : SIG_BLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
정규화 전
학생 : [sigprocmask(SOG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL);]
정규화 후
원본 학생 : sigprocmask(SOG_BLOCK,&sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL);
변형 학생 : SOG_BLOCK&sig_set,NULL,sigprocmask
변형 정답 : ;SIG_BLOCK&sig_set,NULL,sigprocmask
20190001 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190001 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [exec("find",args,(void*)0)]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : exec("find",args,(void*)0)
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : 0execvoid"find"args,*,
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [exec("find",args,(void*)0)]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : exec("find",args,(void*)0)
원본 정답 : execv("find",args)<0
변형 학생 : 0execvoid"find"args,*,
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [exec("find",args,(void*)0)]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : exec("find",args,(void*)0)
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : 0execvoid"find"args,*,
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [exec("find",args,(void*)0)]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : exec("find",args,(void*)0)
원본 정답 : execv("find",args)==-1
변형 학생 : 0execvoid"find"args,*,
변형 정답 : "",-1==acdeefginrsvx
20190001 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,rusage)]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,rusage)
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : &status0,rusage,wait3
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190001 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190001 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190001 is finished..
Grading 20190002...
20190002 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190002 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190002 / 1-5.txt : Attempt #1 / 1
정규화 전
학생 : [Don'tuseenvpaferputenv()]
정답 : [getenv("WARNING")]
정규화 후
원본 학생 : Don'tuseenvpaferputenv()
원본 정답 : getenv("WARNING")
변형 학생 : Don'tuseenvpaferputenv(
변형 정답 : getenv"WARNING"(
20190002 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190002 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : execlp&child1(
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("date","date",0)
변형 학생 : execlp&child1(
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("date","date")
변형 학생 : execlp&child1(
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("date","date",NULL)
변형 학생 : execlp&child1(
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : execlp&child1(
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : execlp&child1(
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("date","date",0);
변형 학생 : execlp&child1(
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("date","date");
변형 학생 : execlp&child1(
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("date","date",NULL);
변형 학생 : execlp&child1(
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp(&child1)]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp(&child1)
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : execlp&child1(
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190002 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp(&child2)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp(&child2)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : execlp&child2(
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp(&child2)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp(&child2)
원본 정답 : execlp("who","who",0)
변형 학생 : execlp&child2(
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp(&child2)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp(&child2)
원본 정답 : execlp("who","who")
변형 학생 : execlp&child2(
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execlp(&child2)]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execlp(&child2)
원본 정답 : execlp("who","who",NULL)
변형 학생 : execlp&child2(
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execlp(&child2)]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execlp(&child2)
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : execlp&child2(
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execlp(&child2)]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execlp(&child2)
원본 정답 : execlp("who","who",0);
변형 학생 : execlp&child2(
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execlp(&child2)]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execlp(&child2)
원본 정답 : execlp("who","who");
변형 학생 : execlp&child2(
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execlp(&child2)]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execlp(&child2)
원본 정답 : execlp("who","who",NULL);
변형 학생 : execlp&child2(
변형 정답 : ;"who""who",NULL,execlp
20190002 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [wait(&pid)]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : wait(&pid)
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : wait&pid(
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [wait(&pid)]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : wait(&pid)
원본 정답 : (pid=wait(&status))<0
변형 학생 : wait&pid(
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [wait(&pid)]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : wait(&pid)
원본 정답 : (pid=wait(&status))>0
변형 학생 : wait&pid(
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [wait(&pid)]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : wait(&pid)
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : wait&pid(
변형 정답 : !*-01==adiiinpttw
20190002 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190002 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [time(NULL)<0]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : time(NULL)<0
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : timeNULL(0<
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
정규화 전
학생 : [time(NULL)<0]
정답 : [(start=times(&tms_start))<0]
정규화 후
원본 학생 : time(NULL)<0
원본 정답 : (start=times(&tms_start))<0
변형 학생 : timeNULL(0<
변형 정답 : starttimes&tms_start(=0<
20190002 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [time(NULL)<0]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : time(NULL)<0
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : timeNULL(0<
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
정규화 전
학생 : [time(NULL)<0]
정답 : [(end=times(&tms_end))<0]
정규화 후
원본 학생 : time(NULL)<0
원본 정답 : (end=times(&tms_end))<0
변형 학생 : timeNULL(0<
변형 정답 : endtimes&tms_end(=0<
20190002 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190002 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_create0<
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
20190002 / 4-3.txt : Attempt #1 / 4
정규화 전
학생 : [tid=gettid();]
정답 : [tid=pthread_self()]
정규화 후
원본 학생 : tid=gettid();
원본 정답 : tid=pthread_self()
변형 학생 : gettid(;=tid
변형 정답 : tidpthread_self(=
Attempt #2 / 4
정규화 전
학생 : [tid=gettid();]
정답 : [tid=gettid()]
정규화 후
원본 학생 : tid=gettid();
원본 정답 : tid=gettid()
변형 학생 : gettid(;=tid
변형 정답 : tidgettid(=
Attempt #3 / 4
정규화 전
학생 : [tid=gettid();]
정답 : [tid=pthread_self();]
정규화 후
원본 학생 : tid=gettid();
원본 정답 : tid=pthread_self();
변형 학생 : gettid(;=tid
변형 정답 : pthread_self(;=tid
Attempt #4 / 4
단순비교
학생 : [tid=gettid();]
정답 : [tid=gettid();]
20190002 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190002 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190002 / 5-2.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
변형 정답 : !&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
변형 정답 : !&&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
20190002 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
20190002 / 5-4.txt : Attempt #1 / 4
정규화 전
학생 : [wait(&tid1)]
정답 : [pthread_join(tid1,NULL)]
정규화 후
원본 학생 : wait(&tid1)
원본 정답 : pthread_join(tid1,NULL)
변형 학생 : wait&tid1(
변형 정답 : tid1NULL,pthread_join
Attempt #2 / 4
정규화 전
학생 : [wait(&tid1)]
정답 : [pthread_join(tid1,(void*)0)]
정규화 후
원본 학생 : wait(&tid1)
원본 정답 : pthread_join(tid1,(void*)0)
변형 학생 : wait&tid1(
변형 정답 : 0pthread_join*1ddiiotv,
Attempt #3 / 4
정규화 전
학생 : [wait(&tid1)]
정답 : [pthread_join(tid1,NULL);]
정규화 후
원본 학생 : wait(&tid1)
원본 정답 : pthread_join(tid1,NULL);
변형 학생 : wait&tid1(
변형 정답 : ;tid1NULL,pthread_join
Attempt #4 / 4
정규화 전
학생 : [wait(&tid1)]
정답 : [pthread_join(tid1,(void*)0);]
정규화 후
원본 학생 : wait(&tid1)
원본 정답 : pthread_join(tid1,(void*)0);
변형 학생 : wait&tid1(
변형 정답 : ;0pthread_join*1ddiiotv,
20190002 / 6-1.txt : Attempt #1 / 2
정규화 전
학생 : [pthead_mutex_tlock]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정규화 후
원본 학생 : pthead_mutex_tlock
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
변형 학생 : pthead_mutex_tlock
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
Attempt #2 / 2
정규화 전
학생 : [pthead_mutex_tlock]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
정규화 후
원본 학생 : pthead_mutex_tlock
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;
변형 학생 : pthead_mutex_tlock
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER;=
20190002 / 6-2.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_cond_tcond]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정규화 후
원본 학생 : pthread_cond_tcond
원본 정답 : pthread_cond_tcond=PTHREAD_COND_INITIALIZER
변형 학생 : pthread_cond_tcond
변형 정답 : pthread_cond_tcondPTHREAD_COND_INITIALIZER=
Attempt #2 / 2
정규화 전
학생 : [pthread_cond_tcond]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER;]
정규화 후
원본 학생 : pthread_cond_tcond
원본 정답 : pthread_cond_tcond=PTHREAD_COND_INITIALIZER;
변형 학생 : pthread_cond_tcond
변형 정답 : pthread_cond_tcondPTHREAD_COND_INITIALIZER;=
20190002 / 6-3.txt : Attempt #1 / 4
정규화 전
학생 : [pthead_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&lock)]
정규화 후
원본 학생 : pthead_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&lock)
변형 학생 : pthead_cond_signal&cond(
변형 정답 : &cond&lock,pthread_cond_wait
Attempt #2 / 4
정규화 전
학생 : [pthead_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&lock);]
정규화 후
원본 학생 : pthead_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&lock);
변형 학생 : pthead_cond_signal&cond(
변형 정답 : ;&cond&lock,pthread_cond_wait
Attempt #3 / 4
정규화 전
학생 : [pthead_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&mutex)]
정규화 후
원본 학생 : pthead_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&mutex)
변형 학생 : pthead_cond_signal&cond(
변형 정답 : &cond&mutex,pthread_cond_wait
Attempt #4 / 4
정규화 전
학생 : [pthead_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&mutex);]
정규화 후
원본 학생 : pthead_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&mutex);
변형 학생 : pthead_cond_signal&cond(
변형 정답 : ;&cond&mutex,pthread_cond_wait
20190002 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : pthread_cond_signal&cond(
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [glo_val<3||glo_val>6]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : glo_val<3||glo_val>6
변형 학생 : pthread_cond_signal&cond(
변형 정답 : glo_val3<6glo_val<||
Attempt #3 / 3
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [glo_val<VALUE_STOP1|glo_val>VALUE_STOP2]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : glo_val<VALUE_STOP1|glo_val>VALUE_STOP2
변형 학생 : pthread_cond_signal&cond(
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<|
20190002 / 6-5.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_cont_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
정규화 후
원본 학생 : pthread_cont_signal(&cond)
원본 정답 : pthread_cond_signal(&cond)
변형 학생 : pthread_cont_signal&cond(
변형 정답 : pthread_cond_signal&cond(
Attempt #2 / 2
정규화 전
학생 : [pthread_cont_signal(&cond)]
정답 : [pthread_cond_signal(&cond);]
정규화 후
원본 학생 : pthread_cont_signal(&cond)
원본 정답 : pthread_cond_signal(&cond);
변형 학생 : pthread_cont_signal&cond(
변형 정답 : ;pthread_cond_signal&cond(
20190002 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [flags=fcntl(fd,F_GETFL,0))==-1)]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : flags=fcntl(fd,F_GETFL,0))==-1)
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : flagsfdF_GETFL,0,fcntl=-1==
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
정규화 전
학생 : [flags=fcntl(fd,F_GETFL,0))==-1)]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
정규화 후
원본 학생 : flags=fcntl(fd,F_GETFL,0))==-1)
원본 정답 : (val=fcntl(fd,F_GETFL,0))==-1
변형 학생 : flagsfdF_GETFL,0,fcntl=-1==
변형 정답 : ,,-01===EFFGLT_acdffllntv
20190002 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [fd1=open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : fd1=open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open0<=
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [fd1=open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : fd1=open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameO_RDWR,open0<=
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [fd1=open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : fd1=open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameO_RDWR,open0<=
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [fd1=open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : fd1=open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameO_RDWR,open0<=
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [fd1=open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : fd1=open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open0<=
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190002 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190002 / 9-2.txt : Attempt #1 / 1
정규화 전
학생 : [	sigset_t]
정답 : [sigset_t]
정규화 후
원본 학생 : 	sigset_t
원본 정답 : sigset_t
변형 학생 : sigset_t&&
변형 정답 : sigset_t
20190002 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190002 / 9-4.txt : Attempt #1 / 2
정규화 전
학생 : [sigaddset(sig_set,SIGUSR1)]
정답 : [sigaddset(&sig_set,SIGINT)]
정규화 후
원본 학생 : sigaddset(sig_set,SIGUSR1)
원본 정답 : sigaddset(&sig_set,SIGINT)
변형 학생 : sig_setSIGUSR1,sigaddset
변형 정답 : &sig_setSIGINT,sigaddset
Attempt #2 / 2
정규화 전
학생 : [sigaddset(sig_set,SIGUSR1)]
정답 : [sigaddset(&sig_set,SIGINT);]
정규화 후
원본 학생 : sigaddset(sig_set,SIGUSR1)
원본 정답 : sigaddset(&sig_set,SIGINT);
변형 학생 : sig_setSIGUSR1,sigaddset
변형 정답 : ;&sig_setSIGINT,sigaddset
20190002 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190002 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190002 / 10-2.txt : Attempt #1 / 1
단순비교
학생 : [wait3(&status,0,&rusage)==pid]
정답 : [wait3(&status,0,&rusage)==pid]
20190002 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190002 is finished..
Grading 20190003...
20190003 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<fcntl.h>
]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<fcntl.h>

원본 정답 : #include<sys/wait.h>
변형 학생 : #includefcntl.h<>||
변형 정답 : #includesyswait.h/<>
20190003 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : []
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : 
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : (null)
변형 정답 : 0execlpchar"date""date",*,
20190003 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [*((int*))!=0]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : *((int*))!=0
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : !**0=int
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [*((int*))!=0]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : *((int*))!=0
원본 정답 : (pid=wait(&status))<0
변형 학생 : !**0=int
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [*((int*))!=0]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : *((int*))!=0
원본 정답 : (pid=wait(&status))>0
변형 학생 : !**0=int
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [*((int*))!=0]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : *((int*))!=0
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : !**0=int
변형 정답 : !*-01==adiiinpttw
20190003 / 3-1.txt : Attempt #1 / 1
정규화 전
학생 : [time_t]
정답 : [structtms]
정규화 후
원본 학생 : time_t
원본 정답 : structtms
변형 학생 : time_t
변형 정답 : structtms
20190003 / 4-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<pthreadh>]
정답 : [#include<pthread.h>]
정규화 후
원본 학생 : #include<pthreadh>
원본 정답 : #include<pthread.h>
변형 학생 : #includepthreadh<>
변형 정답 : #includepthread.h<>
20190003 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssu_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_create
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssu_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_create
변형 정답 : &tidNULL,ssu_thread,NULL,pthread_create0<
Attempt #3 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssu_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,&ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_create
변형 정답 : !&&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #4 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssu_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,&ssu_thread,NULL)<0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_create
변형 정답 : &tidNULL,&ssu_thread,NULL,pthread_create0<
20190003 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190003 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190003 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190003 / 5-2.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create
변형 정답 : !&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create
변형 정답 : !&&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create
변형 정답 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)<0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create
변형 정답 : &tid1NULL,&ssu_thread1,NULL,pthread_create0<
Attempt #5 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
20190003 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create0<
Attempt #5 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create
Attempt #6 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
20190003 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190003 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190003 / 6-2.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALZIER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정규화 후
원본 학생 : pthread_cond_tcond=PTHREAD_COND_INITIALZIER
원본 정답 : pthread_cond_tcond=PTHREAD_COND_INITIALIZER
변형 학생 : pthread_cond_tcondPTHREAD_COND_INITIALZIER=
변형 정답 : pthread_cond_tcondPTHREAD_COND_INITIALIZER=
Attempt #2 / 2
정규화 전
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALZIER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER;]
정규화 후
원본 학생 : pthread_cond_tcond=PTHREAD_COND_INITIALZIER
원본 정답 : pthread_cond_tcond=PTHREAD_COND_INITIALIZER;
변형 학생 : pthread_cond_tcondPTHREAD_COND_INITIALZIER=
변형 정답 : pthread_cond_tcondPTHREAD_COND_INITIALIZER;=
20190003 / 6-3.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&lock)]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&lock)
변형 학생 : pthread_cond_signal&cond(
변형 정답 : &cond&lock,pthread_cond_wait
Attempt #2 / 4
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&lock);]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&lock);
변형 학생 : pthread_cond_signal&cond(
변형 정답 : ;&cond&lock,pthread_cond_wait
Attempt #3 / 4
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&mutex)]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&mutex)
변형 학생 : pthread_cond_signal&cond(
변형 정답 : &cond&mutex,pthread_cond_wait
Attempt #4 / 4
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&mutex);]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&mutex);
변형 학생 : pthread_cond_signal&cond(
변형 정답 : ;&cond&mutex,pthread_cond_wait
20190003 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val=<VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val=<VALUE_STOP2
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_valVALUE_STOP1<glo_val||VALUE_STOP2<=
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val=<VALUE_STOP2]
정답 : [glo_val<3||glo_val>6]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val=<VALUE_STOP2
원본 정답 : glo_val<3||glo_val>6
변형 학생 : glo_valVALUE_STOP1<glo_val||VALUE_STOP2<=
변형 정답 : glo_val3<6glo_val<||
Attempt #3 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val=<VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1|glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val=<VALUE_STOP2
원본 정답 : glo_val<VALUE_STOP1|glo_val>VALUE_STOP2
변형 학생 : glo_valVALUE_STOP1<glo_val||VALUE_STOP2<=
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<|
20190003 / 6-5.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_signal(&cond)]
정규화 후
원본 학생 : pthread_cond_wait(&cond,&lock)
원본 정답 : pthread_cond_signal(&cond)
변형 학생 : &cond&lock,pthread_cond_wait
변형 정답 : pthread_cond_signal&cond(
Attempt #2 / 2
정규화 전
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_signal(&cond);]
정규화 후
원본 학생 : pthread_cond_wait(&cond,&lock)
원본 정답 : pthread_cond_signal(&cond);
변형 학생 : &cond&lock,pthread_cond_wait
변형 정답 : ;pthread_cond_signal&cond(
20190003 / 7-1.txt : Attempt #1 / 2
정규화 전
학생 : [STDIN_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
정규화 후
원본 학생 : STDIN_FILENO,O_NONBLOCK
원본 정답 : STDOUT_FILENO,O_NONBLOCK
변형 학생 : STDIN_FILENOO_NONBLOCK,
변형 정답 : STDOUT_FILENOO_NONBLOCK,
Attempt #2 / 2
정규화 전
학생 : [STDIN_FILENO,O_NONBLOCK]
정답 : [1,O_NONBLOCK]
정규화 후
원본 학생 : STDIN_FILENO,O_NONBLOCK
원본 정답 : 1,O_NONBLOCK
변형 학생 : STDIN_FILENOO_NONBLOCK,
변형 정답 : 1O_NONBLOCK,
20190003 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(STDIN_FILENO,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(STDIN_FILENO,F_GETFL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01===DEEFFFGIILLNNOSTT__acfllntv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
정규화 전
학생 : [(val=fcntl(STDIN_FILENO,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
정규화 후
원본 학생 : (val=fcntl(STDIN_FILENO,F_GETFL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))==-1
변형 학생 : ,,-01===DEEFFFGIILLNNOSTT__acfllntv
변형 정답 : ,,-01===EFFGLT_acdffllntv
20190003 / 7-3.txt : Attempt #1 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val|=flags]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val|=flags
변형 학생 : valO_NONBLOCK|=
변형 정답 : valflags|=
Attempt #2 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val=val|flags]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val=val|flags
변형 학생 : valO_NONBLOCK|=
변형 정답 : valaafgllsv|=
Attempt #3 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val|=flags;]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val|=flags;
변형 학생 : valO_NONBLOCK|=
변형 정답 : valflags;|=
Attempt #4 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val=val|flags;]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val=val|flags;
변형 학생 : valO_NONBLOCK|=
변형 정답 : val;aafgllsv|=
20190003 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(STDIN_FILENO,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(STDIN_FILENO,F_SETFL,val)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1==DEEFFFIILLNNOSSTT__acfllntv
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
정규화 전
학생 : [fcntl(STDIN_FILENO,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
정규화 후
원본 학생 : fcntl(STDIN_FILENO,F_SETFL,val)==-1
원본 정답 : fcntl(fd,F_SETFL,val)==-1
변형 학생 : ,,-1==DEEFFFIILLNNOSSTT__acfllntv
변형 정답 : ,,-1==EFFLST_acdffllntv
Attempt #3 / 3
정규화 전
학생 : [fcntl(STDIN_FILENO,F_SETFL,val)==-1]
정답 : [(val=fcntl(fd,F_SETFL,0))<0]
정규화 후
원본 학생 : fcntl(STDIN_FILENO,F_SETFL,val)==-1
원본 정답 : (val=fcntl(fd,F_SETFL,0))<0
변형 학생 : ,,-1==DEEFFFIILLNNOSSTT__acfllntv
변형 정답 : valfdF_SETFL,0,fcntl=0<
20190003 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags)
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags;&=
Attempt #5 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;aafgllsv~=
Attempt #6 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags);]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags);
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;afgls~=val
20190003 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR,0644))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,0644,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR,0644))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR,0644))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameO_RDWR,0644,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR,0644))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR,0644))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameO_RDWR,0644,open=0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR,0644))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameO_RDWR,0644,open=0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR,0644))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,0644,open=0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190003 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [fcntl(fd1,F_SETFD,O_APPEND)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : fcntl(fd1,F_SETFD,O_APPEND)==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : ,,-11==ADDEEFFNOPPST__cdfflnt
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
정규화 전
학생 : [fcntl(fd1,F_SETFD,O_APPEND)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정규화 후
원본 학생 : fcntl(fd1,F_SETFD,O_APPEND)==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
변형 학생 : ,,-11==ADDEEFFNOPPST__cdfflnt
변형 정답 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
20190003 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190003 / 8-4.txt : Attempt #1 / 2
정규화 전
학생 : [flag|FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
정규화 후
원본 학생 : flag|FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC
변형 학생 : CCDEEFLOX_afgl|
변형 정답 : &CCDEEFLOX_afgl
Attempt #2 / 2
정규화 전
학생 : [flag|FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC==FD_CLOEXEC]
정규화 후
원본 학생 : flag|FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC==FD_CLOEXEC
변형 학생 : CCDEEFLOX_afgl|
변형 정답 : &==CCCCDDEEEEFFLLOOXX__afgl
20190003 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190003 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190003 / 9-3.txt : Attempt #1 / 2
정규화 전
학생 : [sigemptyset(&sig_set_)]
정답 : [sigemptyset(&sig_set)]
정규화 후
원본 학생 : sigemptyset(&sig_set_)
원본 정답 : sigemptyset(&sig_set)
변형 학생 : sigemptyset&sig_set_(
변형 정답 : sigemptyset&sig_set(
Attempt #2 / 2
정규화 전
학생 : [sigemptyset(&sig_set_)]
정답 : [sigemptyset(&sig_set);]
정규화 후
원본 학생 : sigemptyset(&sig_set_)
원본 정답 : sigemptyset(&sig_set);
변형 학생 : sigemptyset&sig_set_(
변형 정답 : ;sigemptyset&sig_set(
20190003 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190003 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190003 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190003 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(*status,0,&rusage)!=0]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(*status,0,&rusage)!=0
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : !&*,,003=aaaegirssstttuuw
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190003 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190003 / 10-4.txt : Attempt #1 / 1
정규화 전
학생 : [WIFSIGNALED(#stat)]
정답 : [WIFSIGNALED(stat)]
정규화 후
원본 학생 : WIFSIGNALED(#stat)
원본 정답 : WIFSIGNALED(stat)
변형 학생 : WIFSIGNALED#stat(
변형 정답 : WIFSIGNALEDstat(
20190003 is finished..
Grading 20190004...
20190004 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190004 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190004 / 1-4.txt : Attempt #1 / 2
정규화 전
학생 : [putenv("WARNING=Don\'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정규화 후
원본 학생 : putenv("WARNING=Don\'tuseenvpafterputenv()")
원본 정답 : putenv("WARNING=Don'tuseenvpafterputenv()")
변형 학생 : Don\'tuseenvpafterputenv"="WARNINGputenv
변형 정답 : Don'tuseenvpafterputenv"="WARNINGputenv
Attempt #2 / 2
정규화 전
학생 : [putenv("WARNING=Don\'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()");]
정규화 후
원본 학생 : putenv("WARNING=Don\'tuseenvpafterputenv()")
원본 정답 : putenv("WARNING=Don'tuseenvpafterputenv()");
변형 학생 : Don\'tuseenvpafterputenv"="WARNINGputenv
변형 정답 : ;Don'tuseenvpafterputenv"="WARNINGputenv
20190004 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190004 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190004 / 2-2.txt : Attempt #1 / 10
단순비교
학생 : [execlp("date","date",(char*)0)]
정답 : [execlp("date","date",(char*)0)]
20190004 / 2-3.txt : Attempt #1 / 8
단순비교
학생 : [execlp("who","who",(char*)0)]
정답 : [execlp("who","who",(char*)0)]
20190004 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : !&(-1=aaisstttuw
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))<0
변형 학생 : !&(-1=aaisstttuw
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))>0
변형 학생 : !&(-1=aaisstttuw
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : !&(-1=aaisstttuw
변형 정답 : !*-01==adiiinpttw
20190004 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190004 / 3-2.txt : Attempt #1 / 2
단순비교
학생 : [(start=times(&tms_start))==-1]
정답 : [(start=times(&tms_start))==-1]
20190004 / 3-3.txt : Attempt #1 / 2
단순비교
학생 : [(end=times(&tms_end))==-1]
정답 : [(end=times(&tms_end))==-1]
20190004 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190004 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190004 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190004 / 4-4.txt : Attempt #1 / 1
정규화 전
학생 : [-lphtread]
정답 : [-lpthread]
정규화 후
원본 학생 : -lphtread
원본 정답 : -lpthread
변형 학생 : -lphtread
변형 정답 : -lpthread
20190004 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190004 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190004 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create0<
Attempt #5 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create
Attempt #6 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create
20190004 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190004 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190004 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190004 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190004 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val<4||glo_val>7]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<4||glo_val>7
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_val4<7glo_val<||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
정규화 전
학생 : [glo_val<4||glo_val>7]
정답 : [glo_val<3||glo_val>6]
정규화 후
원본 학생 : glo_val<4||glo_val>7
원본 정답 : glo_val<3||glo_val>6
변형 학생 : glo_val4<7glo_val<||
변형 정답 : glo_val3<6glo_val<||
Attempt #3 / 3
정규화 전
학생 : [glo_val<4||glo_val>7]
정답 : [glo_val<VALUE_STOP1|glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<4||glo_val>7
원본 정답 : glo_val<VALUE_STOP1|glo_val>VALUE_STOP2
변형 학생 : glo_val4<7glo_val<||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<|
20190004 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190004 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190004 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETTL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETTL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01===EFGLTT_acdffllntv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETTL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETTL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))==-1
변형 학생 : ,,-01===EFGLTT_acdffllntv
변형 정답 : ,,-01===EFFGLT_acdffllntv
20190004 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190004 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,flags)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,flags)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1==EFFLST_acdfffgllnst
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,flags)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,flags)==-1
원본 정답 : fcntl(fd,F_SETFL,val)==-1
변형 학생 : ,,-1==EFFLST_acdfffgllnst
변형 정답 : ,,-1==EFFLST_acdffllntv
Attempt #3 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,flags)==-1]
정답 : [(val=fcntl(fd,F_SETFL,0))<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,flags)==-1
원본 정답 : (val=fcntl(fd,F_SETFL,0))<0
변형 학생 : ,,-1==EFFLST_acdfffgllnst
변형 정답 : valfdF_SETFL,0,fcntl=0<
20190004 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [val&=flags]
정답 : [val&=~flags]
정규화 후
원본 학생 : val&=flags
원본 정답 : val&=~flags
변형 학생 : valflags&=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [val&=flags]
정답 : [val=val&~flags]
정규화 후
원본 학생 : val&=flags
원본 정답 : val=val&~flags
변형 학생 : valflags&=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [val&=flags]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : val&=flags
원본 정답 : val=val&(~flags)
변형 학생 : valflags&=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
정규화 전
학생 : [val&=flags]
정답 : [val&=~flags;]
정규화 후
원본 학생 : val&=flags
원본 정답 : val&=~flags;
변형 학생 : valflags&=
변형 정답 : val~flags;&=
Attempt #5 / 6
정규화 전
학생 : [val&=flags]
정답 : [val=val&~flags;]
정규화 후
원본 학생 : val&=flags
원본 정답 : val=val&~flags;
변형 학생 : valflags&=
변형 정답 : val&;aafgllsv~=
Attempt #6 / 6
정규화 전
학생 : [val&=flags]
정답 : [val=val&(~flags);]
정규화 후
원본 학생 : val&=flags
원본 정답 : val=val&(~flags);
변형 학생 : valflags&=
변형 정답 : val&;afgls~=val
20190004 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))==-1]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))==-1
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))==-1]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))==-1
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))==-1]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))==-1
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
20190004 / 8-2.txt : Attempt #1 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
20190004 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190004 / 8-4.txt : Attempt #1 / 2
정규화 전
학생 : [flag&=FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
정규화 후
원본 학생 : flag&=FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC
변형 학생 : flagFD_CLOEXEC&=
변형 정답 : &CCDEEFLOX_afgl
Attempt #2 / 2
정규화 전
학생 : [flag&=FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC==FD_CLOEXEC]
정규화 후
원본 학생 : flag&=FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC==FD_CLOEXEC
변형 학생 : flagFD_CLOEXEC&=
변형 정답 : &==CCCCDDEEEEFFLLOOXX__afgl
20190004 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190004 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190004 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190004 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190004 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190004 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190004 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execvp("find",args)==-1]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execvp("find",args)==-1
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "",-1==acdeefginprsvx
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execvp("find",args)==-1]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execvp("find",args)==-1
원본 정답 : execv("find",args)<0
변형 학생 : "",-1==acdeefginprsvx
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execvp("find",args)==-1]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execvp("find",args)==-1
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : "",-1==acdeefginprsvx
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execvp("find",args)==-1]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execvp("find",args)==-1
원본 정답 : execv("find",args)==-1
변형 학생 : "",-1==acdeefginprsvx
변형 정답 : "",-1==acdeefginrsvx
20190004 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,&rusage)!=-1]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,&rusage)!=-1
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : !&&,,-013=aaaegirssstttuuw
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190004 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190004 / 10-4.txt : Attempt #1 / 1
정규화 전
학생 : [WIFSIGNALED(!stat)]
정답 : [WIFSIGNALED(stat)]
정규화 후
원본 학생 : WIFSIGNALED(!stat)
원본 정답 : WIFSIGNALED(stat)
변형 학생 : WIFSIGNALED!stat(
변형 정답 : WIFSIGNALEDstat(
20190004 / 10-5.txt : Attempt #1 / 1
정규화 전
학생 : [rusage->ru_utime]
정답 : [&rusage->ru_utime]
정규화 후
원본 학생 : rusage->ru_utime
원본 정답 : &rusage->ru_utime
변형 학생 : rusageru_utime->
변형 정답 : &rusageru_utime->
20190004 is finished..
Grading 20190005...
20190005 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190005 / 1-2.txt : Attempt #1 / 2
정규화 전
학생 : [char*envp]
정답 : [char*envp[]]
정규화 후
원본 학생 : char*envp
원본 정답 : char*envp[]
변형 학생 : *acehnprv
변형 정답 : *[]acehnprv
Attempt #2 / 2
정규화 전
학생 : [char*envp]
정답 : [char**envp]
정규화 후
원본 학생 : char*envp
원본 정답 : char**envp
변형 학생 : *acehnprv
변형 정답 : **acehnprv
20190005 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190005 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190005 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190005 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<wait.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<wait.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includewait.h<>
변형 정답 : #includesyswait.h/<>
20190005 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : "date""date",NULL,execlp
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date",0)
변형 학생 : "date""date",NULL,execlp
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date")
변형 학생 : "date""date",NULL,execlp
변형 정답 : "date""date",execlp
Attempt #4 / 10
단순비교
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",NULL)]
20190005 / 2-3.txt : Attempt #1 / 8
단순비교
학생 : [execlp("who","who",(char*)0)]
정답 : [execlp("who","who",(char*)0)]
20190005 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190005 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [(status=times(&tms_start))<0]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : (status=times(&tms_start))<0
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : statustimes&tms_start(=0<
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
정규화 전
학생 : [(status=times(&tms_start))<0]
정답 : [(start=times(&tms_start))<0]
정규화 후
원본 학생 : (status=times(&tms_start))<0
원본 정답 : (start=times(&tms_start))<0
변형 학생 : statustimes&tms_start(=0<
변형 정답 : starttimes&tms_start(=0<
20190005 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [(status=times(&tms_end))>0]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : (status=times(&tms_end))>0
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : 0statustimes&tms_end(=<
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
정규화 전
학생 : [(status=times(&tms_end))>0]
정답 : [(end=times(&tms_end))<0]
정규화 후
원본 학생 : (status=times(&tms_end))>0
원본 정답 : (end=times(&tms_end))<0
변형 학생 : 0statustimes&tms_end(=<
변형 정답 : endtimes&tms_end(=0<
20190005 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190005 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_create0<
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
20190005 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190005 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190005 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190005 / 5-2.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,0,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,0,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,0,NULL,pthread_create0<
변형 정답 : !&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,0,NULL)<0]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,0,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,0,NULL,pthread_create0<
변형 정답 : !&&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,0,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,0,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
변형 학생 : &tid1NULL,0,NULL,pthread_create0<
변형 정답 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,0,NULL)<0]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,0,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)<0
변형 학생 : &tid1NULL,0,NULL,pthread_create0<
변형 정답 : &tid1NULL,&ssu_thread1,NULL,pthread_create0<
Attempt #5 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,0,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,0,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
변형 학생 : &tid1NULL,0,NULL,pthread_create0<
변형 정답 : &tid1NULL,ssu_thread1,NULL,pthread_create
Attempt #6 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,0,NULL)<0]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,0,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)
변형 학생 : &tid1NULL,0,NULL,pthread_create0<
변형 정답 : &tid1NULL,&ssu_thread1,NULL,pthread_create
20190005 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
20190005 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190005 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190005 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190005 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190005 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190005 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190005 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190005 / 7-2.txt : Attempt #1 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))<0]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
20190005 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190005 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [(fcntl(fd,F_SETFL,val))<0]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : (fcntl(fd,F_SETFL,val))<0
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : fdF_SETFL,val,fcntl0<
변형 정답 : fdF_SETFL,val,fcntl0<
20190005 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190005 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameADDENOOPPRRW__|,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameADDENOOPPRRW__|,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
20190005 / 8-2.txt : Attempt #1 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
20190005 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190005 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190005 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190005 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190005 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190005 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190005 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190005 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190005 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execvp("./find",args)<0]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execvp("./find",args)<0
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : ".find"/args,execvp0<
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execvp("./find",args)<0]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execvp("./find",args)<0
원본 정답 : execv("find",args)<0
변형 학생 : ".find"/args,execvp0<
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execvp("./find",args)<0]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execvp("./find",args)<0
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : ".find"/args,execvp0<
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execvp("./find",args)<0]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execvp("./find",args)<0
원본 정답 : execv("find",args)==-1
변형 학생 : ".find"/args,execvp0<
변형 정답 : "",-1==acdeefginrsvx
20190005 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,&rusage)<0]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,&rusage)<0
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : &status0,&rusage,wait30<
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190005 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190005 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190005 / 10-5.txt : Attempt #1 / 1
단순비교
학생 : [&rusage->ru_utime]
정답 : [&rusage->ru_utime]
20190005 is finished..
Grading 20190006...
20190006 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190006 / 1-2.txt : Attempt #1 / 2
정규화 전
학생 : [char***envp[]]
정답 : [char*envp[]]
정규화 후
원본 학생 : char***envp[]
원본 정답 : char*envp[]
변형 학생 : envp[]char***
변형 정답 : *[]acehnprv
Attempt #2 / 2
정규화 전
학생 : [char***envp[]]
정답 : [char**envp]
정규화 후
원본 학생 : char***envp[]
원본 정답 : char**envp
변형 학생 : envp[]char***
변형 정답 : **acehnprv
20190006 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190006 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190006 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190006 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190006 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("date","date",0)
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("date","date")
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("date","date",NULL)
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("date","date",0);
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("date","date");
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("date","date",NULL);
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp("/bin/date","echo",(char*)NULL)]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp("/bin/date","echo",(char*)NULL)
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : NULLexeclpchar"bin/date"/"echo",*,
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190006 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("/usr/bin/who","echo",(char*)NULL)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("/usr/bin/who","echo",(char*)NULL)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : NULLexeclpchar"usr/bin/who"/"echo",*,
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("/usr/bin/who","echo",(char*)NULL)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("/usr/bin/who","echo",(char*)NULL)
원본 정답 : execlp("who","who",0)
변형 학생 : NULLexeclpchar"usr/bin/who"/"echo",*,
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("/usr/bin/who","echo",(char*)NULL)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("/usr/bin/who","echo",(char*)NULL)
원본 정답 : execlp("who","who")
변형 학생 : NULLexeclpchar"usr/bin/who"/"echo",*,
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execlp("/usr/bin/who","echo",(char*)NULL)]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execlp("/usr/bin/who","echo",(char*)NULL)
원본 정답 : execlp("who","who",NULL)
변형 학생 : NULLexeclpchar"usr/bin/who"/"echo",*,
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execlp("/usr/bin/who","echo",(char*)NULL)]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execlp("/usr/bin/who","echo",(char*)NULL)
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : NULLexeclpchar"usr/bin/who"/"echo",*,
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execlp("/usr/bin/who","echo",(char*)NULL)]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execlp("/usr/bin/who","echo",(char*)NULL)
원본 정답 : execlp("who","who",0);
변형 학생 : NULLexeclpchar"usr/bin/who"/"echo",*,
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execlp("/usr/bin/who","echo",(char*)NULL)]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execlp("/usr/bin/who","echo",(char*)NULL)
원본 정답 : execlp("who","who");
변형 학생 : NULLexeclpchar"usr/bin/who"/"echo",*,
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execlp("/usr/bin/who","echo",(char*)NULL)]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execlp("/usr/bin/who","echo",(char*)NULL)
원본 정답 : execlp("who","who",NULL);
변형 학생 : NULLexeclpchar"usr/bin/who"/"echo",*,
변형 정답 : ;"who""who",NULL,execlp
20190006 / 2-4.txt : Attempt #1 / 4
단순비교
학생 : [(pid=wait(&status))!=-1]
정답 : [(pid=wait(&status))!=-1]
20190006 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190006 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [(start=times(&tms_start))<0]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : (start=times(&tms_start))<0
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : starttimes&tms_start(=0<
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
단순비교
학생 : [(start=times(&tms_start))<0]
정답 : [(start=times(&tms_start))<0]
20190006 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [(end=times(&tms_end))<0]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : (end=times(&tms_end))<0
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : endtimes&tms_end(=0<
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
단순비교
학생 : [(end=times(&tms_end))<0]
정답 : [(end=times(&tms_end))<0]
20190006 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190006 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190006 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190006 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190006 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190006 / 5-3.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
20190006 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190006 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190006 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190006 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190006 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190006 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190006 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190006 / 7-2.txt : Attempt #1 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))<0]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
20190006 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190006 / 7-4.txt : Attempt #1 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)<0]
정답 : [fcntl(fd,F_SETFL,val)<0]
20190006 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190006 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_CREAT|O_APPEND,644))<=0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_CREAT|O_APPEND,644))<=0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameAACDEENOOPPRT__|,644,open=0<=
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_CREAT|O_APPEND,644))<=0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_CREAT|O_APPEND,644))<=0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameAACDEENOOPPRT__|,644,open=0<=
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_CREAT|O_APPEND,644))<=0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_CREAT|O_APPEND,644))<=0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameAACDEENOOPPRT__|,644,open=0<=
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,O_CREAT|O_APPEND,644))<=0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_CREAT|O_APPEND,644))<=0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameAACDEENOOPPRT__|,644,open=0<=
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,O_CREAT|O_APPEND,644))<=0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_CREAT|O_APPEND,644))<=0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameAACDEENOOPPRT__|,644,open=0<=
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190006 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [(flag=fcntl(fd1,F_SETFD,FD_CLOEXEC))==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : (flag=fcntl(fd1,F_SETFD,FD_CLOEXEC))==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : ,,-11===CCDDEEEFFFLOSTX__acdfffgllnt
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
정규화 전
학생 : [(flag=fcntl(fd1,F_SETFD,FD_CLOEXEC))==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정규화 후
원본 학생 : (flag=fcntl(fd1,F_SETFD,FD_CLOEXEC))==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
변형 학생 : ,,-11===CCDDEEEFFFLOSTX__acdfffgllnt
변형 정답 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
20190006 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190006 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190006 / 9-1.txt : Attempt #1 / 1
정규화 전
학생 : [include<signal.h>]
정답 : [#include<signal.h>]
정규화 후
원본 학생 : include<signal.h>
원본 정답 : #include<signal.h>
변형 학생 : includesignal.h<>
변형 정답 : #includesignal.h<>
20190006 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190006 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190006 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190006 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190006 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190006 / 10-1.txt : Attempt #1 / 4
단순비교
학생 : [execv("/usr/bin/find",args)<0]
정답 : [execv("/usr/bin/find",args)<0]
20190006 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,&rusage)!=1]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,&rusage)!=1
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : !&&,,013=aaaegirssstttuuw
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190006 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190006 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190006 is finished..
Grading 20190007...
20190007 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190007 / 1-2.txt : Attempt #1 / 2
정규화 전
학생 : [char*envp]
정답 : [char*envp[]]
정규화 후
원본 학생 : char*envp
원본 정답 : char*envp[]
변형 학생 : *acehnprv
변형 정답 : *[]acehnprv
Attempt #2 / 2
정규화 전
학생 : [char*envp]
정답 : [char**envp]
정규화 후
원본 학생 : char*envp
원본 정답 : char**envp
변형 학생 : *acehnprv
변형 정답 : **acehnprv
20190007 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190007 / 1-4.txt : Attempt #1 / 2
정규화 전
학생 : [putenv("Warning=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정규화 후
원본 학생 : putenv("Warning=Don'tuseenvpafterputenv()")
원본 정답 : putenv("WARNING=Don'tuseenvpafterputenv()")
변형 학생 : Don'tuseenvpafterputenv"="Warningputenv
변형 정답 : Don'tuseenvpafterputenv"="WARNINGputenv
Attempt #2 / 2
정규화 전
학생 : [putenv("Warning=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()");]
정규화 후
원본 학생 : putenv("Warning=Don'tuseenvpafterputenv()")
원본 정답 : putenv("WARNING=Don'tuseenvpafterputenv()");
변형 학생 : Don'tuseenvpafterputenv"="Warningputenv
변형 정답 : ;Don'tuseenvpafterputenv"="WARNINGputenv
20190007 / 1-5.txt : Attempt #1 / 1
정규화 전
학생 : [getenv("Warning")]
정답 : [getenv("WARNING")]
정규화 후
원본 학생 : getenv("Warning")
원본 정답 : getenv("WARNING")
변형 학생 : getenv"Warning"(
변형 정답 : getenv"WARNING"(
20190007 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190007 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : "date""date",NULL,execlp
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date",0)
변형 학생 : "date""date",NULL,execlp
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date")
변형 학생 : "date""date",NULL,execlp
변형 정답 : "date""date",execlp
Attempt #4 / 10
단순비교
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",NULL)]
20190007 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : "who""who",NULL,execlp
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who",0)
변형 학생 : "who""who",NULL,execlp
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who")
변형 학생 : "who""who",NULL,execlp
변형 정답 : "who""who",execlp
Attempt #4 / 8
단순비교
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",NULL)]
20190007 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [(pid=wait(&status))>0]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : (pid=wait(&status))>0
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : 0pidwait&status(=<
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [(pid=wait(&status))>0]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : (pid=wait(&status))>0
원본 정답 : (pid=wait(&status))<0
변형 학생 : 0pidwait&status(=<
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
단순비교
학생 : [(pid=wait(&status))>0]
정답 : [(pid=wait(&status))>0]
20190007 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190007 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190007 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_create0<
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
20190007 / 4-3.txt : Attempt #1 / 4
정규화 전
학생 : [tid=pthread_self();]
정답 : [tid=pthread_self()]
정규화 후
원본 학생 : tid=pthread_self();
원본 정답 : tid=pthread_self()
변형 학생 : pthread_self(;=tid
변형 정답 : tidpthread_self(=
Attempt #2 / 4
정규화 전
학생 : [tid=pthread_self();]
정답 : [tid=gettid()]
정규화 후
원본 학생 : tid=pthread_self();
원본 정답 : tid=gettid()
변형 학생 : pthread_self(;=tid
변형 정답 : tidgettid(=
Attempt #3 / 4
단순비교
학생 : [tid=pthread_self();]
정답 : [tid=pthread_self();]
20190007 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190007 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190007 / 5-2.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
변형 정답 : !&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
변형 정답 : !&&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
20190007 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
20190007 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190007 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190007 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190007 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190007 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190007 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190007 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190007 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [val=fcntl(fd,F_GETFL,NULL)<0]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : val=fcntl(fd,F_GETFL,NULL)<0
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : valfdF_GETFL,NULL,fcntl0<=
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
정규화 전
학생 : [val=fcntl(fd,F_GETFL,NULL)<0]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
정규화 후
원본 학생 : val=fcntl(fd,F_GETFL,NULL)<0
원본 정답 : (val=fcntl(fd,F_GETFL,0))==-1
변형 학생 : valfdF_GETFL,NULL,fcntl0<=
변형 정답 : ,,-01===EFFGLT_acdffllntv
20190007 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190007 / 7-4.txt : Attempt #1 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)<0]
정답 : [fcntl(fd,F_SETFL,val)<0]
20190007 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190007 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameADDENOOPPRRW__|,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameADDENOOPPRRW__|,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
20190007 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
20190007 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190007 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190007 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190007 / 9-3.txt : Attempt #1 / 2
정규화 전
학생 : [sigemptyset(&sig_set);]
정답 : [sigemptyset(&sig_set)]
정규화 후
원본 학생 : sigemptyset(&sig_set);
원본 정답 : sigemptyset(&sig_set)
변형 학생 : ;sigemptyset&sig_set(
변형 정답 : sigemptyset&sig_set(
Attempt #2 / 2
단순비교
학생 : [sigemptyset(&sig_set);]
정답 : [sigemptyset(&sig_set);]
20190007 / 9-4.txt : Attempt #1 / 2
정규화 전
학생 : [sigaddset(&sig_set,SIGINT);]
정답 : [sigaddset(&sig_set,SIGINT)]
정규화 후
원본 학생 : sigaddset(&sig_set,SIGINT);
원본 정답 : sigaddset(&sig_set,SIGINT)
변형 학생 : ;&sig_setSIGINT,sigaddset
변형 정답 : &sig_setSIGINT,sigaddset
Attempt #2 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT);]
정답 : [sigaddset(&sig_set,SIGINT);]
20190007 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190007 / 9-6.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL);]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIG_UNBLOCK,&sig_set,NULL);
원본 정답 : sigprocmask(SIG_UNBLOCK,&sig_set,NULL)
변형 학생 : ;SIG_UNBLOCK&sig_set,NULL,sigprocmask
변형 정답 : SIG_UNBLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL);]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL);]
20190007 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190007 / 10-4.txt : Attempt #1 / 1
정규화 전
학생 : [WTERMSIG(stat)]
정답 : [WIFSIGNALED(stat)]
정규화 후
원본 학생 : WTERMSIG(stat)
원본 정답 : WIFSIGNALED(stat)
변형 학생 : WTERMSIGstat(
변형 정답 : WIFSIGNALEDstat(
20190007 is finished..
Grading 20190008...
20190008 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190008 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190008 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190008 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190008 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190008 / 2-2.txt : Attempt #1 / 10
단순비교
학생 : [execlp("date","date",(char*)0)]
정답 : [execlp("date","date",(char*)0)]
20190008 / 2-3.txt : Attempt #1 / 8
단순비교
학생 : [execlp("who","who",(char*)0)]
정답 : [execlp("who","who",(char*)0)]
20190008 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : !&(-1=aaisstttuw
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))<0
변형 학생 : !&(-1=aaisstttuw
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))>0
변형 학생 : !&(-1=aaisstttuw
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : !&(-1=aaisstttuw
변형 정답 : !*-01==adiiinpttw
20190008 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190008 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [times(&tms_start)<0]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : times(&tms_start)<0
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : times&tms_start(0<
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
정규화 전
학생 : [times(&tms_start)<0]
정답 : [(start=times(&tms_start))<0]
정규화 후
원본 학생 : times(&tms_start)<0
원본 정답 : (start=times(&tms_start))<0
변형 학생 : times&tms_start(0<
변형 정답 : starttimes&tms_start(=0<
20190008 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [times(&tms_end)<0]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : times(&tms_end)<0
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : times&tms_end(0<
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
정규화 전
학생 : [times(&tms_end)<0]
정답 : [(end=times(&tms_end))<0]
정규화 후
원본 학생 : times(&tms_end)<0
원본 정답 : (end=times(&tms_end))<0
변형 학생 : times&tms_end(0<
변형 정답 : endtimes&tms_end(=0<
20190008 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190008 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190008 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190008 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190008 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190008 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190008 / 5-3.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
20190008 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190008 / 6-1.txt : Attempt #1 / 2
정규화 전
학생 : [phread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정규화 후
원본 학생 : phread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
변형 학생 : phread_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
Attempt #2 / 2
정규화 전
학생 : [phread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
정규화 후
원본 학생 : phread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;
변형 학생 : phread_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER;=
20190008 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190008 / 6-3.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_cond_wait(&cond)]
정답 : [pthread_cond_wait(&cond,&lock)]
정규화 후
원본 학생 : pthread_cond_wait(&cond)
원본 정답 : pthread_cond_wait(&cond,&lock)
변형 학생 : pthread_cond_wait&cond(
변형 정답 : &cond&lock,pthread_cond_wait
Attempt #2 / 4
정규화 전
학생 : [pthread_cond_wait(&cond)]
정답 : [pthread_cond_wait(&cond,&lock);]
정규화 후
원본 학생 : pthread_cond_wait(&cond)
원본 정답 : pthread_cond_wait(&cond,&lock);
변형 학생 : pthread_cond_wait&cond(
변형 정답 : ;&cond&lock,pthread_cond_wait
Attempt #3 / 4
정규화 전
학생 : [pthread_cond_wait(&cond)]
정답 : [pthread_cond_wait(&cond,&mutex)]
정규화 후
원본 학생 : pthread_cond_wait(&cond)
원본 정답 : pthread_cond_wait(&cond,&mutex)
변형 학생 : pthread_cond_wait&cond(
변형 정답 : &cond&mutex,pthread_cond_wait
Attempt #4 / 4
정규화 전
학생 : [pthread_cond_wait(&cond)]
정답 : [pthread_cond_wait(&cond,&mutex);]
정규화 후
원본 학생 : pthread_cond_wait(&cond)
원본 정답 : pthread_cond_wait(&cond,&mutex);
변형 학생 : pthread_cond_wait&cond(
변형 정답 : ;&cond&mutex,pthread_cond_wait
20190008 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190008 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190008 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190008 / 7-2.txt : Attempt #1 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))<0]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
20190008 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190008 / 7-4.txt : Attempt #1 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)<0]
정답 : [fcntl(fd,F_SETFL,val)<0]
20190008 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags)
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags;&=
Attempt #5 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;aafgllsv~=
Attempt #6 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags);]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags);
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;afgls~=val
20190008 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_APPEND|O_RDWR,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_APPEND|O_RDWR,0644))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameADDENOOPPRRW__|,0644,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
20190008 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [fcntl(fd1,F_SETFD,1)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : fcntl(fd1,F_SETFD,1)==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : ,,-111==DEFFST_cdfflnt
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
정규화 전
학생 : [fcntl(fd1,F_SETFD,1)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정규화 후
원본 학생 : fcntl(fd1,F_SETFD,1)==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
변형 학생 : ,,-111==DEFFST_cdfflnt
변형 정답 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
20190008 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190008 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190008 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190008 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190008 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190008 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190008 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190008 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190008 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execvp("find",args,(char*)0)]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execvp("find",args,(char*)0)
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : 0execvpchar"find"args,*,
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execvp("find",args,(char*)0)]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execvp("find",args,(char*)0)
원본 정답 : execv("find",args)<0
변형 학생 : 0execvpchar"find"args,*,
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execvp("find",args,(char*)0)]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execvp("find",args,(char*)0)
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : 0execvpchar"find"args,*,
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execvp("find",args,(char*)0)]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execvp("find",args,(char*)0)
원본 정답 : execv("find",args)==-1
변형 학생 : 0execvpchar"find"args,*,
변형 정답 : "",-1==acdeefginrsvx
20190008 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,&rusage)!=-1]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,&rusage)!=-1
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : !&&,,-013=aaaegirssstttuuw
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190008 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190008 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190008 / 10-5.txt : Attempt #1 / 1
정규화 전
학생 : [rusage->tv_usec]
정답 : [&rusage->ru_utime]
정규화 후
원본 학생 : rusage->tv_usec
원본 정답 : &rusage->ru_utime
변형 학생 : rusagetv_usec->
변형 정답 : &rusageru_utime->
20190008 is finished..
Grading 20190009...
20190009 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190009 / 1-3.txt : Attempt #1 / 2
정규화 전
학생 : [putenv]
정답 : [putenv("TZ=PST8PDT")]
정규화 후
원본 학생 : putenv
원본 정답 : putenv("TZ=PST8PDT")
변형 학생 : putenv
변형 정답 : "TZPST8PDT"=putenv
Attempt #2 / 2
정규화 전
학생 : [putenv]
정답 : [putenv("TZ=PST8PDT");]
정규화 후
원본 학생 : putenv
원본 정답 : putenv("TZ=PST8PDT");
변형 학생 : putenv
변형 정답 : ;"TZPST8PDT"=putenv
20190009 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190009 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("date","date",0)
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("date","date")
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("date","date",NULL)
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("date","date",0);
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("date","date");
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("date","date",NULL);
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp("date","./date",(char*)0);]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp("date","./date",(char*)0);
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : ;0execlpchar"date"".date"/,*,
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190009 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("who","./who",(char*)0);]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("who","./who",(char*)0);
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : ;0execlpchar"who"".who"/,*,
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("who","./who",(char*)0);]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("who","./who",(char*)0);
원본 정답 : execlp("who","who",0)
변형 학생 : ;0execlpchar"who"".who"/,*,
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("who","./who",(char*)0);]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("who","./who",(char*)0);
원본 정답 : execlp("who","who")
변형 학생 : ;0execlpchar"who"".who"/,*,
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execlp("who","./who",(char*)0);]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execlp("who","./who",(char*)0);
원본 정답 : execlp("who","who",NULL)
변형 학생 : ;0execlpchar"who"".who"/,*,
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execlp("who","./who",(char*)0);]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execlp("who","./who",(char*)0);
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : ;0execlpchar"who"".who"/,*,
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execlp("who","./who",(char*)0);]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execlp("who","./who",(char*)0);
원본 정답 : execlp("who","who",0);
변형 학생 : ;0execlpchar"who"".who"/,*,
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execlp("who","./who",(char*)0);]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execlp("who","./who",(char*)0);
원본 정답 : execlp("who","who");
변형 학생 : ;0execlpchar"who"".who"/,*,
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execlp("who","./who",(char*)0);]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execlp("who","./who",(char*)0);
원본 정답 : execlp("who","who",NULL);
변형 학생 : ;0execlpchar"who"".who"/,*,
변형 정답 : ;"who""who",NULL,execlp
20190009 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : !&(-1=aaisstttuw
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))<0
변형 학생 : !&(-1=aaisstttuw
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))>0
변형 학생 : !&(-1=aaisstttuw
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : !&(-1=aaisstttuw
변형 정답 : !*-01==adiiinpttw
20190009 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190009 / 3-2.txt : Attempt #1 / 2
단순비교
학생 : [(start=times(&tms_start))==-1]
정답 : [(start=times(&tms_start))==-1]
20190009 / 3-3.txt : Attempt #1 / 2
단순비교
학생 : [(end=times(&tms_end))==-1]
정답 : [(end=times(&tms_end))==-1]
20190009 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190009 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssy_thread,NULL)]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssy_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssy_thread,NULL,pthread_create
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssy_thread,NULL)]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssy_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
변형 학생 : &tidNULL,ssy_thread,NULL,pthread_create
변형 정답 : &tidNULL,ssu_thread,NULL,pthread_create0<
Attempt #3 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssy_thread,NULL)]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssy_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,&ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssy_thread,NULL,pthread_create
변형 정답 : !&&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #4 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssy_thread,NULL)]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssy_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,&ssu_thread,NULL)<0
변형 학생 : &tidNULL,ssy_thread,NULL,pthread_create
변형 정답 : &tidNULL,&ssu_thread,NULL,pthread_create0<
20190009 / 4-3.txt : Attempt #1 / 4
정규화 전
학생 : [tid=gettid();]
정답 : [tid=pthread_self()]
정규화 후
원본 학생 : tid=gettid();
원본 정답 : tid=pthread_self()
변형 학생 : gettid(;=tid
변형 정답 : tidpthread_self(=
Attempt #2 / 4
정규화 전
학생 : [tid=gettid();]
정답 : [tid=gettid()]
정규화 후
원본 학생 : tid=gettid();
원본 정답 : tid=gettid()
변형 학생 : gettid(;=tid
변형 정답 : tidgettid(=
Attempt #3 / 4
정규화 전
학생 : [tid=gettid();]
정답 : [tid=pthread_self();]
정규화 후
원본 학생 : tid=gettid();
원본 정답 : tid=pthread_self();
변형 학생 : gettid(;=tid
변형 정답 : pthread_self(;=tid
Attempt #4 / 4
단순비교
학생 : [tid=gettid();]
정답 : [tid=gettid();]
20190009 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190009 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190009 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190009 / 5-3.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
20190009 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190009 / 6-1.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정규화 후
원본 학생 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
변형 학생 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER;=
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
Attempt #2 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
20190009 / 6-2.txt : Attempt #1 / 2
정규화 전
학생 : [pthrad_cond_tcond=PTHREAD_COND_INITIALIZER;]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정규화 후
원본 학생 : pthrad_cond_tcond=PTHREAD_COND_INITIALIZER;
원본 정답 : pthread_cond_tcond=PTHREAD_COND_INITIALIZER
변형 학생 : pthrad_cond_tcondPTHREAD_COND_INITIALIZER;=
변형 정답 : pthread_cond_tcondPTHREAD_COND_INITIALIZER=
Attempt #2 / 2
정규화 전
학생 : [pthrad_cond_tcond=PTHREAD_COND_INITIALIZER;]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER;]
정규화 후
원본 학생 : pthrad_cond_tcond=PTHREAD_COND_INITIALIZER;
원본 정답 : pthread_cond_tcond=PTHREAD_COND_INITIALIZER;
변형 학생 : pthrad_cond_tcondPTHREAD_COND_INITIALIZER;=
변형 정답 : pthread_cond_tcondPTHREAD_COND_INITIALIZER;=
20190009 / 6-3.txt : Attempt #1 / 4
정규화 전
학생 : [if(glo_val>VALUE_STOP1)
	pthread_cond_signal(&cond);
]
정답 : [pthread_cond_wait(&cond,&lock)]
정규화 후
원본 학생 : if(glo_val>VALUE_STOP1)
	pthread_cond_signal(&cond);

원본 정답 : pthread_cond_wait(&cond,&lock)
변형 학생 : ifVALUE_STOP1glo_val<&&&(;__aaccdddeghilnnnooprst||||
변형 정답 : &cond&lock,pthread_cond_wait
Attempt #2 / 4
정규화 전
학생 : [if(glo_val>VALUE_STOP1)
	pthread_cond_signal(&cond);
]
정답 : [pthread_cond_wait(&cond,&lock);]
정규화 후
원본 학생 : if(glo_val>VALUE_STOP1)
	pthread_cond_signal(&cond);

원본 정답 : pthread_cond_wait(&cond,&lock);
변형 학생 : ifVALUE_STOP1glo_val<&&&(;__aaccdddeghilnnnooprst||||
변형 정답 : ;&cond&lock,pthread_cond_wait
Attempt #3 / 4
정규화 전
학생 : [if(glo_val>VALUE_STOP1)
	pthread_cond_signal(&cond);
]
정답 : [pthread_cond_wait(&cond,&mutex)]
정규화 후
원본 학생 : if(glo_val>VALUE_STOP1)
	pthread_cond_signal(&cond);

원본 정답 : pthread_cond_wait(&cond,&mutex)
변형 학생 : ifVALUE_STOP1glo_val<&&&(;__aaccdddeghilnnnooprst||||
변형 정답 : &cond&mutex,pthread_cond_wait
Attempt #4 / 4
정규화 전
학생 : [if(glo_val>VALUE_STOP1)
	pthread_cond_signal(&cond);
]
정답 : [pthread_cond_wait(&cond,&mutex);]
정규화 후
원본 학생 : if(glo_val>VALUE_STOP1)
	pthread_cond_signal(&cond);

원본 정답 : pthread_cond_wait(&cond,&mutex);
변형 학생 : ifVALUE_STOP1glo_val<&&&(;__aaccdddeghilnnnooprst||||
변형 정답 : ;&cond&mutex,pthread_cond_wait
20190009 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val>]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val>
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_val>
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
정규화 전
학생 : [glo_val>]
정답 : [glo_val<3||glo_val>6]
정규화 후
원본 학생 : glo_val>
원본 정답 : glo_val<3||glo_val>6
변형 학생 : glo_val>
변형 정답 : glo_val3<6glo_val<||
Attempt #3 / 3
정규화 전
학생 : [glo_val>]
정답 : [glo_val<VALUE_STOP1|glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val>
원본 정답 : glo_val<VALUE_STOP1|glo_val>VALUE_STOP2
변형 학생 : glo_val>
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<|
20190009 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190009 / 7-1.txt : Attempt #1 / 2
정규화 전
학생 : [ntowrite,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
정규화 후
원본 학생 : ntowrite,O_NONBLOCK
원본 정답 : STDOUT_FILENO,O_NONBLOCK
변형 학생 : ntowriteO_NONBLOCK,
변형 정답 : STDOUT_FILENOO_NONBLOCK,
Attempt #2 / 2
정규화 전
학생 : [ntowrite,O_NONBLOCK]
정답 : [1,O_NONBLOCK]
정규화 후
원본 학생 : ntowrite,O_NONBLOCK
원본 정답 : 1,O_NONBLOCK
변형 학생 : ntowriteO_NONBLOCK,
변형 정답 : 1O_NONBLOCK,
20190009 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01===EFFGLT_acdffllntv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
20190009 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190009 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(fd,F_SETFD,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFD,val)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1==DEFFST_acdffllntv
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
정규화 전
학생 : [fcntl(fd,F_SETFD,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
정규화 후
원본 학생 : fcntl(fd,F_SETFD,val)==-1
원본 정답 : fcntl(fd,F_SETFL,val)==-1
변형 학생 : ,,-1==DEFFST_acdffllntv
변형 정답 : ,,-1==EFFLST_acdffllntv
Attempt #3 / 3
정규화 전
학생 : [fcntl(fd,F_SETFD,val)==-1]
정답 : [(val=fcntl(fd,F_SETFL,0))<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFD,val)==-1
원본 정답 : (val=fcntl(fd,F_SETFL,0))<0
변형 학생 : ,,-1==DEFFST_acdffllntv
변형 정답 : valfdF_SETFL,0,fcntl=0<
20190009 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [val&=flags]
정답 : [val&=~flags]
정규화 후
원본 학생 : val&=flags
원본 정답 : val&=~flags
변형 학생 : valflags&=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [val&=flags]
정답 : [val=val&~flags]
정규화 후
원본 학생 : val&=flags
원본 정답 : val=val&~flags
변형 학생 : valflags&=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [val&=flags]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : val&=flags
원본 정답 : val=val&(~flags)
변형 학생 : valflags&=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
정규화 전
학생 : [val&=flags]
정답 : [val&=~flags;]
정규화 후
원본 학생 : val&=flags
원본 정답 : val&=~flags;
변형 학생 : valflags&=
변형 정답 : val~flags;&=
Attempt #5 / 6
정규화 전
학생 : [val&=flags]
정답 : [val=val&~flags;]
정규화 후
원본 학생 : val&=flags
원본 정답 : val=val&~flags;
변형 학생 : valflags&=
변형 정답 : val&;aafgllsv~=
Attempt #6 / 6
정규화 전
학생 : [val&=flags]
정답 : [val=val&(~flags);]
정규화 후
원본 학생 : val&=flags
원본 정답 : val=val&(~flags);
변형 학생 : valflags&=
변형 정답 : val&;afgls~=val
20190009 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,"O_RDWR"))==-1]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,"O_RDWR"))==-1
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : "",-11===DORRW_adeeeffilmnnop
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,"O_RDWR"))==-1]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,"O_RDWR"))==-1
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : "",-11===DORRW_adeeeffilmnnop
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,"O_RDWR"))==-1]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,"O_RDWR"))==-1
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : "",-11===DORRW_adeeeffilmnnop
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,"O_RDWR"))==-1]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,"O_RDWR"))==-1
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : "",-11===DORRW_adeeeffilmnnop
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,"O_RDWR"))==-1]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,"O_RDWR"))==-1
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : "",-11===DORRW_adeeeffilmnnop
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190009 / 8-2.txt : Attempt #1 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
20190009 / 8-3.txt : Attempt #1 / 2
정규화 전
학생 : [flag&O_APPEND==O_APPEND]
정답 : [flag&O_APPEND]
정규화 후
원본 학생 : flag&O_APPEND==O_APPEND
원본 정답 : flag&O_APPEND
변형 학생 : &==AADDEENNOOPPPP__afgl
변형 정답 : &ADENOPP_afgl
Attempt #2 / 2
단순비교
학생 : [flag&O_APPEND==O_APPEND]
정답 : [flag&O_APPEND==O_APPEND]
20190009 / 8-4.txt : Attempt #1 / 2
정규화 전
학생 : [flag&FD_CLOEXEC==FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
정규화 후
원본 학생 : flag&FD_CLOEXEC==FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC
변형 학생 : &==CCCCDDEEEEFFLLOOXX__afgl
변형 정답 : &CCDEEFLOX_afgl
Attempt #2 / 2
단순비교
학생 : [flag&FD_CLOEXEC==FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC==FD_CLOEXEC]
20190009 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190009 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190009 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190009 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190009 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190009 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execv("find",args)==-1]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execv("find",args)==-1
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "",-1==acdeefginrsvx
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execv("find",args)==-1]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execv("find",args)==-1
원본 정답 : execv("find",args)<0
변형 학생 : "",-1==acdeefginrsvx
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execv("find",args)==-1]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execv("find",args)==-1
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : "",-1==acdeefginrsvx
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
단순비교
학생 : [execv("find",args)==-1]
정답 : [execv("find",args)==-1]
20190009 is finished..
Grading 20190010...
20190010 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190010 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<pthread.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<pthread.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includepthread.h<>
변형 정답 : #includesyswait.h/<>
20190010 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : "date""date",NULL,execlp
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date",0)
변형 학생 : "date""date",NULL,execlp
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date")
변형 학생 : "date""date",NULL,execlp
변형 정답 : "date""date",execlp
Attempt #4 / 10
단순비교
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",NULL)]
20190010 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : "who""who",NULL,execlp
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who",0)
변형 학생 : "who""who",NULL,execlp
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who")
변형 학생 : "who""who",NULL,execlp
변형 정답 : "who""who",execlp
Attempt #4 / 8
단순비교
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",NULL)]
20190010 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : []
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : 
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : (null)
변형 정답 : !&(-1==aadiipsstttuw
20190010 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190010 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [times(&tms_start)]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : times(&tms_start)
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : times&tms_start(
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
정규화 전
학생 : [times(&tms_start)]
정답 : [(start=times(&tms_start))<0]
정규화 후
원본 학생 : times(&tms_start)
원본 정답 : (start=times(&tms_start))<0
변형 학생 : times&tms_start(
변형 정답 : starttimes&tms_start(=0<
20190010 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [times(&tms_end)]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : times(&tms_end)
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : times&tms_end(
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
정규화 전
학생 : [times(&tms_end)]
정답 : [(end=times(&tms_end))<0]
정규화 후
원본 학생 : times(&tms_end)
원본 정답 : (end=times(&tms_end))<0
변형 학생 : times&tms_end(
변형 정답 : endtimes&tms_end(=0<
20190010 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190010 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190010 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190010 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190010 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190010 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190010 / 5-3.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
20190010 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190010 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190010 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190010 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190010 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val<3||glo_val>6]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<3||glo_val>6
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_val3<6glo_val<||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
단순비교
학생 : [glo_val<3||glo_val>6]
정답 : [glo_val<3||glo_val>6]
20190010 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190010 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190010 / 7-2.txt : Attempt #1 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))<0]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
20190010 / 7-3.txt : Attempt #1 / 4
정규화 전
학생 : [val|=flags;]
정답 : [val|=flags]
정규화 후
원본 학생 : val|=flags;
원본 정답 : val|=flags
변형 학생 : valflags;|=
변형 정답 : valflags|=
Attempt #2 / 4
정규화 전
학생 : [val|=flags;]
정답 : [val=val|flags]
정규화 후
원본 학생 : val|=flags;
원본 정답 : val=val|flags
변형 학생 : valflags;|=
변형 정답 : valaafgllsv|=
Attempt #3 / 4
단순비교
학생 : [val|=flags;]
정답 : [val|=flags;]
20190010 / 7-4.txt : Attempt #1 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)<0]
정답 : [fcntl(fd,F_SETFL,val)<0]
20190010 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190010 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
20190010 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190010 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190010 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190010 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190010 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190010 / 9-5.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIG_BLOCK,sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIG_BLOCK,sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL)
변형 학생 : SIG_BLOCKsig_set,NULL,sigprocmask
변형 정답 : SIG_BLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
정규화 전
학생 : [sigprocmask(SIG_BLOCK,sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL);]
정규화 후
원본 학생 : sigprocmask(SIG_BLOCK,sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL);
변형 학생 : SIG_BLOCKsig_set,NULL,sigprocmask
변형 정답 : ;SIG_BLOCK&sig_set,NULL,sigprocmask
20190010 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190010 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execvp("find",args)==-1]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execvp("find",args)==-1
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "",-1==acdeefginprsvx
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execvp("find",args)==-1]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execvp("find",args)==-1
원본 정답 : execv("find",args)<0
변형 학생 : "",-1==acdeefginprsvx
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execvp("find",args)==-1]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execvp("find",args)==-1
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : "",-1==acdeefginprsvx
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execvp("find",args)==-1]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execvp("find",args)==-1
원본 정답 : execv("find",args)==-1
변형 학생 : "",-1==acdeefginprsvx
변형 정답 : "",-1==acdeefginrsvx
20190010 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,&rusage)==-1]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,&rusage)==-1
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : &&,,-013==aaaegirssstttuuw
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190010 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190010 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190010 / 10-5.txt : Attempt #1 / 1
단순비교
학생 : [&rusage->ru_utime]
정답 : [&rusage->ru_utime]
20190010 is finished..
Grading 20190011...
20190011 / 1-1.txt : Attempt #1 / 2
정규화 전
학생 : [externchar**environ;]
정답 : [externchar**environ]
정규화 후
원본 학생 : externchar**environ;
원본 정답 : externchar**environ
변형 학생 : **;aceeehinnnorrrtvx
변형 정답 : **aceeehinnnorrrtvx
Attempt #2 / 2
정규화 전
학생 : [externchar**environ;]
정답 : [externchar*environ[]]
정규화 후
원본 학생 : externchar**environ;
원본 정답 : externchar*environ[]
변형 학생 : **;aceeehinnnorrrtvx
변형 정답 : *[]aceeehinnnorrrtvx
20190011 / 1-2.txt : Attempt #1 / 2
정규화 전
학생 : [char**envp]
정답 : [char*envp[]]
정규화 후
원본 학생 : char**envp
원본 정답 : char*envp[]
변형 학생 : **acehnprv
변형 정답 : *[]acehnprv
Attempt #2 / 2
단순비교
학생 : [char**envp]
정답 : [char**envp]
20190011 / 1-3.txt : Attempt #1 / 2
정규화 전
학생 : [setenv("TZ","PST8PDT",1);]
정답 : [putenv("TZ=PST8PDT")]
정규화 후
원본 학생 : setenv("TZ","PST8PDT",1);
원본 정답 : putenv("TZ=PST8PDT")
변형 학생 : ;"TZ""PST8PDT",1,setenv
변형 정답 : "TZPST8PDT"=putenv
Attempt #2 / 2
정규화 전
학생 : [setenv("TZ","PST8PDT",1);]
정답 : [putenv("TZ=PST8PDT");]
정규화 후
원본 학생 : setenv("TZ","PST8PDT",1);
원본 정답 : putenv("TZ=PST8PDT");
변형 학생 : ;"TZ""PST8PDT",1,setenv
변형 정답 : ;"TZPST8PDT"=putenv
20190011 / 1-4.txt : Attempt #1 / 2
정규화 전
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()");]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정규화 후
원본 학생 : putenv("WARNING=Don'tuseenvpafterputenv()");
원본 정답 : putenv("WARNING=Don'tuseenvpafterputenv()")
변형 학생 : ;Don'tuseenvpafterputenv"="WARNINGputenv
변형 정답 : Don'tuseenvpafterputenv"="WARNINGputenv
Attempt #2 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()");]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()");]
20190011 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190011 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<wait.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<wait.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includewait.h<>
변형 정답 : #includesyswait.h/<>
20190011 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("date","date",0)
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("date","date")
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("date","date",NULL)
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("date","date",0);
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("date","date");
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("date","date",NULL);
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp("date","date",(void*)0);]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp("date","date",(void*)0);
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : ;0execlpvoid"date""date",*,
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190011 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execv("who","who",(void*)0);]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execv("who","who",(void*)0);
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : ;0execvvoid"who""who",*,
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execv("who","who",(void*)0);]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execv("who","who",(void*)0);
원본 정답 : execlp("who","who",0)
변형 학생 : ;0execvvoid"who""who",*,
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execv("who","who",(void*)0);]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execv("who","who",(void*)0);
원본 정답 : execlp("who","who")
변형 학생 : ;0execvvoid"who""who",*,
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execv("who","who",(void*)0);]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execv("who","who",(void*)0);
원본 정답 : execlp("who","who",NULL)
변형 학생 : ;0execvvoid"who""who",*,
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execv("who","who",(void*)0);]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execv("who","who",(void*)0);
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : ;0execvvoid"who""who",*,
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execv("who","who",(void*)0);]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execv("who","who",(void*)0);
원본 정답 : execlp("who","who",0);
변형 학생 : ;0execvvoid"who""who",*,
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execv("who","who",(void*)0);]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execv("who","who",(void*)0);
원본 정답 : execlp("who","who");
변형 학생 : ;0execvvoid"who""who",*,
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execv("who","who",(void*)0);]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execv("who","who",(void*)0);
원본 정답 : execlp("who","who",NULL);
변형 학생 : ;0execvvoid"who""who",*,
변형 정답 : ;"who""who",NULL,execlp
20190011 / 2-4.txt : Attempt #1 / 4
단순비교
학생 : [(pid=wait(&status))!=-1]
정답 : [(pid=wait(&status))!=-1]
20190011 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190011 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [(start=times(&tms_start))<0]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : (start=times(&tms_start))<0
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : starttimes&tms_start(=0<
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
단순비교
학생 : [(start=times(&tms_start))<0]
정답 : [(start=times(&tms_start))<0]
20190011 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [(end=times(&tms_end))<0]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : (end=times(&tms_end))<0
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : endtimes&tms_end(=0<
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
단순비교
학생 : [(end=times(&tms_end))<0]
정답 : [(end=times(&tms_end))<0]
20190011 / 4-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<lpthread.h>]
정답 : [#include<pthread.h>]
정규화 후
원본 학생 : #include<lpthread.h>
원본 정답 : #include<pthread.h>
변형 학생 : #includelpthread.h<>
변형 정답 : #includepthread.h<>
20190011 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_create0<
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
20190011 / 4-3.txt : Attempt #1 / 4
정규화 전
학생 : [tid=pthread_self();]
정답 : [tid=pthread_self()]
정규화 후
원본 학생 : tid=pthread_self();
원본 정답 : tid=pthread_self()
변형 학생 : pthread_self(;=tid
변형 정답 : tidpthread_self(=
Attempt #2 / 4
정규화 전
학생 : [tid=pthread_self();]
정답 : [tid=gettid()]
정규화 후
원본 학생 : tid=pthread_self();
원본 정답 : tid=gettid()
변형 학생 : pthread_self(;=tid
변형 정답 : tidgettid(=
Attempt #3 / 4
단순비교
학생 : [tid=pthread_self();]
정답 : [tid=pthread_self();]
20190011 / 5-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<lpthread.h>]
정답 : [#include<pthread.h>]
정규화 후
원본 학생 : #include<lpthread.h>
원본 정답 : #include<pthread.h>
변형 학생 : #includelpthread.h<>
변형 정답 : #includepthread.h<>
20190011 / 5-2.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
변형 정답 : !&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
변형 정답 : !&&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
20190011 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
20190011 / 5-4.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_join(tid1,NULL);]
정답 : [pthread_join(tid1,NULL)]
정규화 후
원본 학생 : pthread_join(tid1,NULL);
원본 정답 : pthread_join(tid1,NULL)
변형 학생 : ;tid1NULL,pthread_join
변형 정답 : tid1NULL,pthread_join
Attempt #2 / 4
정규화 전
학생 : [pthread_join(tid1,NULL);]
정답 : [pthread_join(tid1,(void*)0)]
정규화 후
원본 학생 : pthread_join(tid1,NULL);
원본 정답 : pthread_join(tid1,(void*)0)
변형 학생 : ;tid1NULL,pthread_join
변형 정답 : 0pthread_join*1ddiiotv,
Attempt #3 / 4
단순비교
학생 : [pthread_join(tid1,NULL);]
정답 : [pthread_join(tid1,NULL);]
20190011 / 6-1.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정규화 후
원본 학생 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
변형 학생 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER;=
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
Attempt #2 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
20190011 / 6-2.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER;]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정규화 후
원본 학생 : pthread_cond_tcond=PTHREAD_COND_INITIALIZER;
원본 정답 : pthread_cond_tcond=PTHREAD_COND_INITIALIZER
변형 학생 : pthread_cond_tcondPTHREAD_COND_INITIALIZER;=
변형 정답 : pthread_cond_tcondPTHREAD_COND_INITIALIZER=
Attempt #2 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER;]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER;]
20190011 / 6-3.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_cond_wait(&cond,&lock);]
정답 : [pthread_cond_wait(&cond,&lock)]
정규화 후
원본 학생 : pthread_cond_wait(&cond,&lock);
원본 정답 : pthread_cond_wait(&cond,&lock)
변형 학생 : ;&cond&lock,pthread_cond_wait
변형 정답 : &cond&lock,pthread_cond_wait
Attempt #2 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock);]
정답 : [pthread_cond_wait(&cond,&lock);]
20190011 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val>=VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val>=VALUE_STOP2
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<=||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val>=VALUE_STOP2]
정답 : [glo_val<3||glo_val>6]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val>=VALUE_STOP2
원본 정답 : glo_val<3||glo_val>6
변형 학생 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<=||
변형 정답 : glo_val3<6glo_val<||
Attempt #3 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val>=VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1|glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val>=VALUE_STOP2
원본 정답 : glo_val<VALUE_STOP1|glo_val>VALUE_STOP2
변형 학생 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<=||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<|
20190011 / 6-5.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_cond_signal(&cond);]
정답 : [pthread_cond_signal(&cond)]
정규화 후
원본 학생 : pthread_cond_signal(&cond);
원본 정답 : pthread_cond_signal(&cond)
변형 학생 : ;pthread_cond_signal&cond(
변형 정답 : pthread_cond_signal&cond(
Attempt #2 / 2
단순비교
학생 : [pthread_cond_signal(&cond);]
정답 : [pthread_cond_signal(&cond);]
20190011 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190011 / 7-2.txt : Attempt #1 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))<0]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
20190011 / 7-3.txt : Attempt #1 / 4
정규화 전
학생 : [val|=flags;]
정답 : [val|=flags]
정규화 후
원본 학생 : val|=flags;
원본 정답 : val|=flags
변형 학생 : valflags;|=
변형 정답 : valflags|=
Attempt #2 / 4
정규화 전
학생 : [val|=flags;]
정답 : [val=val|flags]
정규화 후
원본 학생 : val|=flags;
원본 정답 : val=val|flags
변형 학생 : valflags;|=
변형 정답 : valaafgllsv|=
Attempt #3 / 4
단순비교
학생 : [val|=flags;]
정답 : [val|=flags;]
20190011 / 7-4.txt : Attempt #1 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)<0]
정답 : [fcntl(fd,F_SETFL,val)<0]
20190011 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [val&=~flags;]
정답 : [val&=~flags]
정규화 후
원본 학생 : val&=~flags;
원본 정답 : val&=~flags
변형 학생 : val~flags;&=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [val&=~flags;]
정답 : [val=val&~flags]
정규화 후
원본 학생 : val&=~flags;
원본 정답 : val=val&~flags
변형 학생 : val~flags;&=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [val&=~flags;]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : val&=~flags;
원본 정답 : val=val&(~flags)
변형 학생 : val~flags;&=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
단순비교
학생 : [val&=~flags;]
정답 : [val&=~flags;]
20190011 / 8-1.txt : Attempt #1 / 5
단순비교
학생 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
20190011 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
20190011 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190011 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190011 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190011 / 9-2.txt : Attempt #1 / 1
정규화 전
학생 : [sigset]
정답 : [sigset_t]
정규화 후
원본 학생 : sigset
원본 정답 : sigset_t
변형 학생 : sigset
변형 정답 : sigset_t
20190011 / 9-3.txt : Attempt #1 / 2
정규화 전
학생 : [sigemptyset(&sig_set);]
정답 : [sigemptyset(&sig_set)]
정규화 후
원본 학생 : sigemptyset(&sig_set);
원본 정답 : sigemptyset(&sig_set)
변형 학생 : ;sigemptyset&sig_set(
변형 정답 : sigemptyset&sig_set(
Attempt #2 / 2
단순비교
학생 : [sigemptyset(&sig_set);]
정답 : [sigemptyset(&sig_set);]
20190011 / 9-4.txt : Attempt #1 / 2
정규화 전
학생 : [sigaddset(&sig_set,SIGINT);]
정답 : [sigaddset(&sig_set,SIGINT)]
정규화 후
원본 학생 : sigaddset(&sig_set,SIGINT);
원본 정답 : sigaddset(&sig_set,SIGINT)
변형 학생 : ;&sig_setSIGINT,sigaddset
변형 정답 : &sig_setSIGINT,sigaddset
Attempt #2 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT);]
정답 : [sigaddset(&sig_set,SIGINT);]
20190011 / 9-5.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL);]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIG_BLOCK,&sig_set,NULL);
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL)
변형 학생 : ;SIG_BLOCK&sig_set,NULL,sigprocmask
변형 정답 : SIG_BLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL);]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL);]
20190011 / 9-6.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL);]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIG_UNBLOCK,&sig_set,NULL);
원본 정답 : sigprocmask(SIG_UNBLOCK,&sig_set,NULL)
변형 학생 : ;SIG_UNBLOCK&sig_set,NULL,sigprocmask
변형 정답 : SIG_UNBLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL);]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL);]
20190011 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execvp("find",args)<0]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execvp("find",args)<0
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "find"args,execvp0<
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execvp("find",args)<0]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execvp("find",args)<0
원본 정답 : execv("find",args)<0
변형 학생 : "find"args,execvp0<
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execvp("find",args)<0]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execvp("find",args)<0
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : "find"args,execvp0<
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execvp("find",args)<0]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execvp("find",args)<0
원본 정답 : execv("find",args)==-1
변형 학생 : "find"args,execvp0<
변형 정답 : "",-1==acdeefginrsvx
20190011 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,rusage)>0]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,rusage)>0
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : 0&status0,rusage,wait3<
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190011 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190011 / 10-5.txt : Attempt #1 / 1
정규화 전
학생 : [&(rusage->ru_utime)]
정답 : [&rusage->ru_utime]
정규화 후
원본 학생 : &(rusage->ru_utime)
원본 정답 : &rusage->ru_utime
변형 학생 : rusageru_utime->&
변형 정답 : &rusageru_utime->
20190011 is finished..
Grading 20190012...
20190012 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190012 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190012 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190012 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190012 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190012 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<wait.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<wait.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includewait.h<>
변형 정답 : #includesyswait.h/<>
20190012 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("date","date",0)
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("date","date")
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("date","date",NULL)
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("date","date",0);
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("date","date");
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("date","date",NULL);
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp("/usr/bin/who","who",(void*)0)]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp("/usr/bin/who","who",(void*)0)
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : 0execlpvoid"usr/bin/who"/"who",*,
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190012 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("/bin/date","date",(void*)0)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("/bin/date","date",(void*)0)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : 0execlpvoid"bin/date"/"date",*,
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("/bin/date","date",(void*)0)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("/bin/date","date",(void*)0)
원본 정답 : execlp("who","who",0)
변형 학생 : 0execlpvoid"bin/date"/"date",*,
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("/bin/date","date",(void*)0)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("/bin/date","date",(void*)0)
원본 정답 : execlp("who","who")
변형 학생 : 0execlpvoid"bin/date"/"date",*,
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execlp("/bin/date","date",(void*)0)]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execlp("/bin/date","date",(void*)0)
원본 정답 : execlp("who","who",NULL)
변형 학생 : 0execlpvoid"bin/date"/"date",*,
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execlp("/bin/date","date",(void*)0)]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execlp("/bin/date","date",(void*)0)
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : 0execlpvoid"bin/date"/"date",*,
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execlp("/bin/date","date",(void*)0)]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execlp("/bin/date","date",(void*)0)
원본 정답 : execlp("who","who",0);
변형 학생 : 0execlpvoid"bin/date"/"date",*,
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execlp("/bin/date","date",(void*)0)]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execlp("/bin/date","date",(void*)0)
원본 정답 : execlp("who","who");
변형 학생 : 0execlpvoid"bin/date"/"date",*,
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execlp("/bin/date","date",(void*)0)]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execlp("/bin/date","date",(void*)0)
원본 정답 : execlp("who","who",NULL);
변형 학생 : 0execlpvoid"bin/date"/"date",*,
변형 정답 : ;"who""who",NULL,execlp
20190012 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [(pid=wait(&status))>0]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : (pid=wait(&status))>0
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : 0pidwait&status(=<
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [(pid=wait(&status))>0]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : (pid=wait(&status))>0
원본 정답 : (pid=wait(&status))<0
변형 학생 : 0pidwait&status(=<
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
단순비교
학생 : [(pid=wait(&status))>0]
정답 : [(pid=wait(&status))>0]
20190012 / 3-1.txt : Attempt #1 / 1
정규화 전
학생 : [structtimeval]
정답 : [structtms]
정규화 후
원본 학생 : structtimeval
원본 정답 : structtms
변형 학생 : structtimeval
변형 정답 : structtms
20190012 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190012 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190012 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190012 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190012 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190012 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190012 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create0<
Attempt #5 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create
Attempt #6 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
20190012 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190012 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190012 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190012 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190012 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val<3||glo_val>6]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<3||glo_val>6
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_val3<6glo_val<||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
단순비교
학생 : [glo_val<3||glo_val>6]
정답 : [glo_val<3||glo_val>6]
20190012 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190012 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190012 / 7-2.txt : Attempt #1 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))<0]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
20190012 / 7-3.txt : Attempt #1 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val|=flags]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val|=flags
변형 학생 : valO_NONBLOCK|=
변형 정답 : valflags|=
Attempt #2 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val=val|flags]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val=val|flags
변형 학생 : valO_NONBLOCK|=
변형 정답 : valaafgllsv|=
Attempt #3 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val|=flags;]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val|=flags;
변형 학생 : valO_NONBLOCK|=
변형 정답 : valflags;|=
Attempt #4 / 4
정규화 전
학생 : [val|=O_NONBLOCK]
정답 : [val=val|flags;]
정규화 후
원본 학생 : val|=O_NONBLOCK
원본 정답 : val=val|flags;
변형 학생 : valO_NONBLOCK|=
변형 정답 : val;aafgllsv|=
20190012 / 7-4.txt : Attempt #1 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)<0]
정답 : [fcntl(fd,F_SETFL,val)<0]
20190012 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags)
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags;&=
Attempt #5 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;aafgllsv~=
Attempt #6 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags);]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags);
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;afgls~=val
20190012 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameADDENOOPPRRW__|,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR|O_APPEND))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR|O_APPEND))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameADDENOOPPRRW__|,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
20190012 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
20190012 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190012 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190012 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190012 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190012 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190012 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190012 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190012 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190012 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execv("/usr/bin/find",args)!=0]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execv("/usr/bin/find",args)!=0
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : !"",///0=abcdeefgiinnrrssuvx
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execv("/usr/bin/find",args)!=0]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execv("/usr/bin/find",args)!=0
원본 정답 : execv("find",args)<0
변형 학생 : !"",///0=abcdeefgiinnrrssuvx
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execv("/usr/bin/find",args)!=0]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execv("/usr/bin/find",args)!=0
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : !"",///0=abcdeefgiinnrrssuvx
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execv("/usr/bin/find",args)!=0]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execv("/usr/bin/find",args)!=0
원본 정답 : execv("find",args)==-1
변형 학생 : !"",///0=abcdeefgiinnrrssuvx
변형 정답 : "",-1==acdeefginrsvx
20190012 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190012 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190012 is finished..
Grading 20190013...
20190013 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190013 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190013 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190013 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190013 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190013 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190013 / 2-2.txt : Attempt #1 / 10
단순비교
학생 : [execlp("date","date",(char*)0)]
정답 : [execlp("date","date",(char*)0)]
20190013 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [exec("who","who",(char*)0)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : exec("who","who",(char*)0)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : 0execchar"who""who",*,
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [exec("who","who",(char*)0)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : exec("who","who",(char*)0)
원본 정답 : execlp("who","who",0)
변형 학생 : 0execchar"who""who",*,
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [exec("who","who",(char*)0)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : exec("who","who",(char*)0)
원본 정답 : execlp("who","who")
변형 학생 : 0execchar"who""who",*,
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [exec("who","who",(char*)0)]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : exec("who","who",(char*)0)
원본 정답 : execlp("who","who",NULL)
변형 학생 : 0execchar"who""who",*,
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [exec("who","who",(char*)0)]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : exec("who","who",(char*)0)
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : 0execchar"who""who",*,
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [exec("who","who",(char*)0)]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : exec("who","who",(char*)0)
원본 정답 : execlp("who","who",0);
변형 학생 : 0execchar"who""who",*,
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [exec("who","who",(char*)0)]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : exec("who","who",(char*)0)
원본 정답 : execlp("who","who");
변형 학생 : 0execchar"who""who",*,
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [exec("who","who",(char*)0)]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : exec("who","who",(char*)0)
원본 정답 : execlp("who","who",NULL);
변형 학생 : 0execchar"who""who",*,
변형 정답 : ;"who""who",NULL,execlp
20190013 / 2-4.txt : Attempt #1 / 4
단순비교
학생 : [(pid=wait(&status))!=-1]
정답 : [(pid=wait(&status))!=-1]
20190013 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190013 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [times(&tms_end)==-1]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : times(&tms_end)==-1
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : &(-1==_deeimmnsstt
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
정규화 전
학생 : [times(&tms_end)==-1]
정답 : [(end=times(&tms_end))<0]
정규화 후
원본 학생 : times(&tms_end)==-1
원본 정답 : (end=times(&tms_end))<0
변형 학생 : &(-1==_deeimmnsstt
변형 정답 : endtimes&tms_end(=0<
20190013 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190013 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190013 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190013 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190013 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190013 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190013 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create0<
Attempt #5 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create
Attempt #6 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
변형 학생 : !&,,,012=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create
20190013 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190013 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190013 / 6-3.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_cond_wait(&cond,&mutex)]
정답 : [pthread_cond_wait(&cond,&lock)]
정규화 후
원본 학생 : pthread_cond_wait(&cond,&mutex)
원본 정답 : pthread_cond_wait(&cond,&lock)
변형 학생 : &cond&mutex,pthread_cond_wait
변형 정답 : &cond&lock,pthread_cond_wait
Attempt #2 / 4
정규화 전
학생 : [pthread_cond_wait(&cond,&mutex)]
정답 : [pthread_cond_wait(&cond,&lock);]
정규화 후
원본 학생 : pthread_cond_wait(&cond,&mutex)
원본 정답 : pthread_cond_wait(&cond,&lock);
변형 학생 : &cond&mutex,pthread_cond_wait
변형 정답 : ;&cond&lock,pthread_cond_wait
Attempt #3 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&mutex)]
정답 : [pthread_cond_wait(&cond,&mutex)]
20190013 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||VALUE_STOP2<glo_val]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||VALUE_STOP2<glo_val
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
20190013 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190013 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190013 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01===EFFGLT_acdffllntv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
20190013 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190013 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,val)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1==EFFLST_acdffllntv
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
20190013 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190013 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190013 / 8-2.txt : Attempt #1 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
20190013 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190013 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190013 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190013 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190013 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190013 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190013 / 9-5.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIG_SETMASK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIG_SETMASK,&sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL)
변형 학생 : SIG_SETMASK&sig_set,NULL,sigprocmask
변형 정답 : SIG_BLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
정규화 전
학생 : [sigprocmask(SIG_SETMASK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL);]
정규화 후
원본 학생 : sigprocmask(SIG_SETMASK,&sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL);
변형 학생 : SIG_SETMASK&sig_set,NULL,sigprocmask
변형 정답 : ;SIG_BLOCK&sig_set,NULL,sigprocmask
20190013 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190013 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execv("/usr/bin/find",args)==-1]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execv("/usr/bin/find",args)==-1
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "",-///1==abcdeefgiinnrrssuvx
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execv("/usr/bin/find",args)==-1]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execv("/usr/bin/find",args)==-1
원본 정답 : execv("find",args)<0
변형 학생 : "",-///1==abcdeefgiinnrrssuvx
변형 정답 : "find"args,execv0<
Attempt #3 / 4
단순비교
학생 : [execv("/usr/bin/find",args)==-1]
정답 : [execv("/usr/bin/find",args)==-1]
20190013 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,&rusage)<0]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,&rusage)<0
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : &status0,&rusage,wait30<
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190013 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190013 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190013 / 10-5.txt : Attempt #1 / 1
단순비교
학생 : [&rusage->ru_utime]
정답 : [&rusage->ru_utime]
20190013 is finished..
Grading 20190014...
20190014 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190014 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190014 / 1-3.txt : Attempt #1 / 2
정규화 전
학생 : [putenv("TZ=PST8P")]
정답 : [putenv("TZ=PST8PDT")]
정규화 후
원본 학생 : putenv("TZ=PST8P")
원본 정답 : putenv("TZ=PST8PDT")
변형 학생 : "TZPST8P"=putenv
변형 정답 : "TZPST8PDT"=putenv
Attempt #2 / 2
정규화 전
학생 : [putenv("TZ=PST8P")]
정답 : [putenv("TZ=PST8PDT");]
정규화 후
원본 학생 : putenv("TZ=PST8P")
원본 정답 : putenv("TZ=PST8PDT");
변형 학생 : "TZPST8P"=putenv
변형 정답 : ;"TZPST8PDT"=putenv
20190014 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190014 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190014 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<pthread.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<pthread.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includepthread.h<>
변형 정답 : #includesyswait.h/<>
20190014 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("who",NULL)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("who",NULL)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : "who"NULL,execlp
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("who",NULL)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("who",NULL)
원본 정답 : execlp("who","who",0)
변형 학생 : "who"NULL,execlp
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("who",NULL)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("who",NULL)
원본 정답 : execlp("who","who")
변형 학생 : "who"NULL,execlp
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execlp("who",NULL)]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execlp("who",NULL)
원본 정답 : execlp("who","who",NULL)
변형 학생 : "who"NULL,execlp
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execlp("who",NULL)]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execlp("who",NULL)
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : "who"NULL,execlp
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execlp("who",NULL)]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execlp("who",NULL)
원본 정답 : execlp("who","who",0);
변형 학생 : "who"NULL,execlp
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execlp("who",NULL)]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execlp("who",NULL)
원본 정답 : execlp("who","who");
변형 학생 : "who"NULL,execlp
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execlp("who",NULL)]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execlp("who",NULL)
원본 정답 : execlp("who","who",NULL);
변형 학생 : "who"NULL,execlp
변형 정답 : ;"who""who",NULL,execlp
20190014 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [(pid=wait())!=-1]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : (pid=wait())!=-1
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : !(-1==adiiptw
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [(pid=wait())!=-1]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : (pid=wait())!=-1
원본 정답 : (pid=wait(&status))<0
변형 학생 : !(-1==adiiptw
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [(pid=wait())!=-1]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : (pid=wait())!=-1
원본 정답 : (pid=wait(&status))>0
변형 학생 : !(-1==adiiptw
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [(pid=wait())!=-1]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : (pid=wait())!=-1
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : !(-1==adiiptw
변형 정답 : !*-01==adiiinpttw
20190014 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190014 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [(tms_start=times(&start))<0]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : (tms_start=times(&start))<0
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : tms_starttimes&start(=0<
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
정규화 전
학생 : [(tms_start=times(&start))<0]
정답 : [(start=times(&tms_start))<0]
정규화 후
원본 학생 : (tms_start=times(&start))<0
원본 정답 : (start=times(&tms_start))<0
변형 학생 : tms_starttimes&start(=0<
변형 정답 : starttimes&tms_start(=0<
20190014 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [(tms_end=times(&end))<0]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : (tms_end=times(&end))<0
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : tms_endtimes&end(=0<
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
정규화 전
학생 : [(tms_end=times(&end))<0]
정답 : [(end=times(&tms_end))<0]
정규화 후
원본 학생 : (tms_end=times(&end))<0
원본 정답 : (end=times(&tms_end))<0
변형 학생 : tms_endtimes&end(=0<
변형 정답 : endtimes&tms_end(=0<
20190014 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190014 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190014 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190014 / 5-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<pthead.h>]
정답 : [#include<pthread.h>]
정규화 후
원본 학생 : #include<pthead.h>
원본 정답 : #include<pthread.h>
변형 학생 : #includepthead.h<>
변형 정답 : #includepthread.h<>
20190014 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190014 / 5-3.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
20190014 / 5-4.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_join(tid1,0)]
정답 : [pthread_join(tid1,NULL)]
정규화 후
원본 학생 : pthread_join(tid1,0)
원본 정답 : pthread_join(tid1,NULL)
변형 학생 : tid10,pthread_join
변형 정답 : tid1NULL,pthread_join
Attempt #2 / 4
정규화 전
학생 : [pthread_join(tid1,0)]
정답 : [pthread_join(tid1,(void*)0)]
정규화 후
원본 학생 : pthread_join(tid1,0)
원본 정답 : pthread_join(tid1,(void*)0)
변형 학생 : tid10,pthread_join
변형 정답 : 0pthread_join*1ddiiotv,
Attempt #3 / 4
정규화 전
학생 : [pthread_join(tid1,0)]
정답 : [pthread_join(tid1,NULL);]
정규화 후
원본 학생 : pthread_join(tid1,0)
원본 정답 : pthread_join(tid1,NULL);
변형 학생 : tid10,pthread_join
변형 정답 : ;tid1NULL,pthread_join
Attempt #4 / 4
정규화 전
학생 : [pthread_join(tid1,0)]
정답 : [pthread_join(tid1,(void*)0);]
정규화 후
원본 학생 : pthread_join(tid1,0)
원본 정답 : pthread_join(tid1,(void*)0);
변형 학생 : tid10,pthread_join
변형 정답 : ;0pthread_join*1ddiiotv,
20190014 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190014 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190014 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190014 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val<2&&glo_val>7]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<2&&glo_val>7
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_val2<7glo_val<&&
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
정규화 전
학생 : [glo_val<2&&glo_val>7]
정답 : [glo_val<3||glo_val>6]
정규화 후
원본 학생 : glo_val<2&&glo_val>7
원본 정답 : glo_val<3||glo_val>6
변형 학생 : glo_val2<7glo_val<&&
변형 정답 : glo_val3<6glo_val<||
Attempt #3 / 3
정규화 전
학생 : [glo_val<2&&glo_val>7]
정답 : [glo_val<VALUE_STOP1|glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<2&&glo_val>7
원본 정답 : glo_val<VALUE_STOP1|glo_val>VALUE_STOP2
변형 학생 : glo_val2<7glo_val<&&
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<|
20190014 / 6-5.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_cond_signal(&lock)]
정답 : [pthread_cond_signal(&cond)]
정규화 후
원본 학생 : pthread_cond_signal(&lock)
원본 정답 : pthread_cond_signal(&cond)
변형 학생 : pthread_cond_signal&lock(
변형 정답 : pthread_cond_signal&cond(
Attempt #2 / 2
정규화 전
학생 : [pthread_cond_signal(&lock)]
정답 : [pthread_cond_signal(&cond);]
정규화 후
원본 학생 : pthread_cond_signal(&lock)
원본 정답 : pthread_cond_signal(&cond);
변형 학생 : pthread_cond_signal&lock(
변형 정답 : ;pthread_cond_signal&cond(
20190014 / 7-1.txt : Attempt #1 / 2
정규화 전
학생 : [ntowrite,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
정규화 후
원본 학생 : ntowrite,O_NONBLOCK
원본 정답 : STDOUT_FILENO,O_NONBLOCK
변형 학생 : ntowriteO_NONBLOCK,
변형 정답 : STDOUT_FILENOO_NONBLOCK,
Attempt #2 / 2
정규화 전
학생 : [ntowrite,O_NONBLOCK]
정답 : [1,O_NONBLOCK]
정규화 후
원본 학생 : ntowrite,O_NONBLOCK
원본 정답 : 1,O_NONBLOCK
변형 학생 : ntowriteO_NONBLOCK,
변형 정답 : 1O_NONBLOCK,
20190014 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFL,flags))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFL,flags))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-1===EFFGLT_aacdfffglllnstv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFL,flags))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFL,flags))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))==-1
변형 학생 : ,,-1===EFFGLT_aacdfffglllnstv
변형 정답 : ,,-01===EFFGLT_acdffllntv
20190014 / 7-3.txt : Attempt #1 / 4
정규화 전
학생 : [flags|=flags;]
정답 : [val|=flags]
정규화 후
원본 학생 : flags|=flags;
원본 정답 : val|=flags
변형 학생 : flagsflags;|=
변형 정답 : valflags|=
Attempt #2 / 4
정규화 전
학생 : [flags|=flags;]
정답 : [val=val|flags]
정규화 후
원본 학생 : flags|=flags;
원본 정답 : val=val|flags
변형 학생 : flagsflags;|=
변형 정답 : valaafgllsv|=
Attempt #3 / 4
정규화 전
학생 : [flags|=flags;]
정답 : [val|=flags;]
정규화 후
원본 학생 : flags|=flags;
원본 정답 : val|=flags;
변형 학생 : flagsflags;|=
변형 정답 : valflags;|=
Attempt #4 / 4
정규화 전
학생 : [flags|=flags;]
정답 : [val=val|flags;]
정규화 후
원본 학생 : flags|=flags;
원본 정답 : val=val|flags;
변형 학생 : flagsflags;|=
변형 정답 : val;aafgllsv|=
20190014 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [(val=fcntl(fd,F_SETFL,flags))==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_SETFL,flags))==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1===EFFLST_aacdfffglllnstv
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
정규화 전
학생 : [(val=fcntl(fd,F_SETFL,flags))==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
정규화 후
원본 학생 : (val=fcntl(fd,F_SETFL,flags))==-1
원본 정답 : fcntl(fd,F_SETFL,val)==-1
변형 학생 : ,,-1===EFFLST_aacdfffglllnstv
변형 정답 : ,,-1==EFFLST_acdffllntv
Attempt #3 / 3
정규화 전
학생 : [(val=fcntl(fd,F_SETFL,flags))==-1]
정답 : [(val=fcntl(fd,F_SETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_SETFL,flags))==-1
원본 정답 : (val=fcntl(fd,F_SETFL,0))<0
변형 학생 : ,,-1===EFFLST_aacdfffglllnstv
변형 정답 : valfdF_SETFL,0,fcntl=0<
20190014 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [flags~=!flags]
정답 : [val&=~flags]
정규화 후
원본 학생 : flags~=!flags
원본 정답 : val&=~flags
변형 학생 : flags~!flags=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [flags~=!flags]
정답 : [val=val&~flags]
정규화 후
원본 학생 : flags~=!flags
원본 정답 : val=val&~flags
변형 학생 : flags~!flags=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [flags~=!flags]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : flags~=!flags
원본 정답 : val=val&(~flags)
변형 학생 : flags~!flags=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
정규화 전
학생 : [flags~=!flags]
정답 : [val&=~flags;]
정규화 후
원본 학생 : flags~=!flags
원본 정답 : val&=~flags;
변형 학생 : flags~!flags=
변형 정답 : val~flags;&=
Attempt #5 / 6
정규화 전
학생 : [flags~=!flags]
정답 : [val=val&~flags;]
정규화 후
원본 학생 : flags~=!flags
원본 정답 : val=val&~flags;
변형 학생 : flags~!flags=
변형 정답 : val&;aafgllsv~=
Attempt #6 / 6
정규화 전
학생 : [flags~=!flags]
정답 : [val=val&(~flags);]
정규화 후
원본 학생 : flags~=!flags
원본 정답 : val=val&(~flags);
변형 학생 : flags~!flags=
변형 정답 : val&;afgls~=val
20190014 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : filenameO_RDWR,open0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : filenameO_RDWR,open0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : filenameO_RDWR,open0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : filenameO_RDWR,open0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [open(filename,O_RDWR)<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : open(filename,O_RDWR)<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : filenameO_RDWR,open0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190014 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190014 / 9-2.txt : Attempt #1 / 1
정규화 전
학생 : [structsigacion]
정답 : [sigset_t]
정규화 후
원본 학생 : structsigacion
원본 정답 : sigset_t
변형 학생 : structsigacion
변형 정답 : sigset_t
20190014 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190014 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190014 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190014 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190014 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execv("usr/bin/find",args)<0]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execv("usr/bin/find",args)<0
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "usrbin/find"/args,execv0<
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execv("usr/bin/find",args)<0]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execv("usr/bin/find",args)<0
원본 정답 : execv("find",args)<0
변형 학생 : "usrbin/find"/args,execv0<
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execv("usr/bin/find",args)<0]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execv("usr/bin/find",args)<0
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : "usrbin/find"/args,execv0<
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execv("usr/bin/find",args)<0]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execv("usr/bin/find",args)<0
원본 정답 : execv("find",args)==-1
변형 학생 : "usrbin/find"/args,execv0<
변형 정답 : "",-1==acdeefginrsvx
20190014 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,&rusage)<0]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,&rusage)<0
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : &status0,&rusage,wait30<
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190014 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190014 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190014 / 10-5.txt : Attempt #1 / 1
정규화 전
학생 : [rusage->ru_utime]
정답 : [&rusage->ru_utime]
정규화 후
원본 학생 : rusage->ru_utime
원본 정답 : &rusage->ru_utime
변형 학생 : rusageru_utime->
변형 정답 : &rusageru_utime->
20190014 is finished..
Grading 20190015...
20190015 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190015 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190015 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190015 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190015 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190015 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190015 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : "date""dat",NULL,execlp
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("date","date",0)
변형 학생 : "date""dat",NULL,execlp
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("date","date")
변형 학생 : "date""dat",NULL,execlp
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("date","date",NULL)
변형 학생 : "date""dat",NULL,execlp
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : "date""dat",NULL,execlp
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : "date""dat",NULL,execlp
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("date","date",0);
변형 학생 : "date""dat",NULL,execlp
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("date","date");
변형 학생 : "date""dat",NULL,execlp
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("date","date",NULL);
변형 학생 : "date""dat",NULL,execlp
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp("date","dat",NULL)]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp("date","dat",NULL)
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : "date""dat",NULL,execlp
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190015 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : "who""who",NULL,execlp
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who",0)
변형 학생 : "who""who",NULL,execlp
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who")
변형 학생 : "who""who",NULL,execlp
변형 정답 : "who""who",execlp
Attempt #4 / 8
단순비교
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",NULL)]
20190015 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [(pid=wait(&status))]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : (pid=wait(&status))
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : pidwait&status(=
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [(pid=wait(&status))]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : (pid=wait(&status))
원본 정답 : (pid=wait(&status))<0
변형 학생 : pidwait&status(=
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [(pid=wait(&status))]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : (pid=wait(&status))
원본 정답 : (pid=wait(&status))>0
변형 학생 : pidwait&status(=
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [(pid=wait(&status))]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : (pid=wait(&status))
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : pidwait&status(=
변형 정답 : !*-01==adiiinpttw
20190015 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190015 / 3-2.txt : Attempt #1 / 2
단순비교
학생 : [(start=times(&tms_start))==-1]
정답 : [(start=times(&tms_start))==-1]
20190015 / 3-3.txt : Attempt #1 / 2
단순비교
학생 : [(end=times(&tms_end))==-1]
정답 : [(end=times(&tms_end))==-1]
20190015 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190015 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190015 / 4-3.txt : Attempt #1 / 4
정규화 전
학생 : [tid=pthread_self]
정답 : [tid=pthread_self()]
정규화 후
원본 학생 : tid=pthread_self
원본 정답 : tid=pthread_self()
변형 학생 : tidpthread_self=
변형 정답 : tidpthread_self(=
Attempt #2 / 4
정규화 전
학생 : [tid=pthread_self]
정답 : [tid=gettid()]
정규화 후
원본 학생 : tid=pthread_self
원본 정답 : tid=gettid()
변형 학생 : tidpthread_self=
변형 정답 : tidgettid(=
Attempt #3 / 4
정규화 전
학생 : [tid=pthread_self]
정답 : [tid=pthread_self();]
정규화 후
원본 학생 : tid=pthread_self
원본 정답 : tid=pthread_self();
변형 학생 : tidpthread_self=
변형 정답 : pthread_self(;=tid
Attempt #4 / 4
정규화 전
학생 : [tid=pthread_self]
정답 : [tid=gettid();]
정규화 후
원본 학생 : tid=pthread_self
원본 정답 : tid=gettid();
변형 학생 : tidpthread_self=
변형 정답 : gettid(;=tid
20190015 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190015 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190015 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190015 / 5-3.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
20190015 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190015 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190015 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190015 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190015 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190015 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190015 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190015 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01===EFFGLT_acdffllntv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
20190015 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190015 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,val)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1==EFFLST_acdffllntv
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
20190015 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190015 / 8-1.txt : Attempt #1 / 5
단순비교
학생 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
20190015 / 8-2.txt : Attempt #1 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
20190015 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190015 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190015 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190015 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190015 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190015 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190015 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190015 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190015 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execv("/usr/bin/find",args)==-1]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execv("/usr/bin/find",args)==-1
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "",-///1==abcdeefgiinnrrssuvx
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execv("/usr/bin/find",args)==-1]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execv("/usr/bin/find",args)==-1
원본 정답 : execv("find",args)<0
변형 학생 : "",-///1==abcdeefgiinnrrssuvx
변형 정답 : "find"args,execv0<
Attempt #3 / 4
단순비교
학생 : [execv("/usr/bin/find",args)==-1]
정답 : [execv("/usr/bin/find",args)==-1]
20190015 / 10-2.txt : Attempt #1 / 1
정규화 전
학생 : [wait3(&status,0,&rusage)!=-1]
정답 : [wait3(&status,0,&rusage)==pid]
정규화 후
원본 학생 : wait3(&status,0,&rusage)!=-1
원본 정답 : wait3(&status,0,&rusage)==pid
변형 학생 : !&&,,-013=aaaegirssstttuuw
변형 정답 : &&,,03==aaadegiiprssstttuuw
20190015 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190015 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190015 / 10-5.txt : Attempt #1 / 1
정규화 전
학생 : [rusage->ru_utime]
정답 : [&rusage->ru_utime]
정규화 후
원본 학생 : rusage->ru_utime
원본 정답 : &rusage->ru_utime
변형 학생 : rusageru_utime->
변형 정답 : &rusageru_utime->
20190015 is finished..
Grading 20190016...
20190016 / 1-1.txt : Attempt #1 / 2
정규화 전
학생 : [char*environ]
정답 : [externchar**environ]
정규화 후
원본 학생 : char*environ
원본 정답 : externchar**environ
변형 학생 : *acehinnorrv
변형 정답 : **aceeehinnnorrrtvx
Attempt #2 / 2
정규화 전
학생 : [char*environ]
정답 : [externchar*environ[]]
정규화 후
원본 학생 : char*environ
원본 정답 : externchar*environ[]
변형 학생 : *acehinnorrv
변형 정답 : *[]aceeehinnnorrrtvx
20190016 / 1-2.txt : Attempt #1 / 2
정규화 전
학생 : [int**envpp]
정답 : [char*envp[]]
정규화 후
원본 학생 : int**envpp
원본 정답 : char*envp[]
변형 학생 : **einnpptv
변형 정답 : *[]acehnprv
Attempt #2 / 2
정규화 전
학생 : [int**envpp]
정답 : [char**envp]
정규화 후
원본 학생 : int**envpp
원본 정답 : char**envp
변형 학생 : **einnpptv
변형 정답 : **acehnprv
20190016 / 1-3.txt : Attempt #1 / 2
정규화 전
학생 : [putenv(&envp);]
정답 : [putenv("TZ=PST8PDT")]
정규화 후
원본 학생 : putenv(&envp);
원본 정답 : putenv("TZ=PST8PDT")
변형 학생 : ;putenv&envp(
변형 정답 : "TZPST8PDT"=putenv
Attempt #2 / 2
정규화 전
학생 : [putenv(&envp);]
정답 : [putenv("TZ=PST8PDT");]
정규화 후
원본 학생 : putenv(&envp);
원본 정답 : putenv("TZ=PST8PDT");
변형 학생 : ;putenv&envp(
변형 정답 : ;"TZPST8PDT"=putenv
20190016 / 1-5.txt : Attempt #1 / 1
정규화 전
학생 : [*environ]
정답 : [getenv("WARNING")]
정규화 후
원본 학생 : *environ
원본 정답 : getenv("WARNING")
변형 학생 : *environ
변형 정답 : getenv"WARNING"(
20190016 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<sys/stat.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<sys/stat.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includesysstat.h/<>
변형 정답 : #includesyswait.h/<>
20190016 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("date","date",0)
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("date","date")
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("date","date",NULL)
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("date","date",0);
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("date","date");
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("date","date",NULL);
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp("./date","date",NULL)]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp("./date","date",NULL)
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : ".date"/"date",NULL,execlp
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190016 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("./who","who",NULL);]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("./who","who",NULL);
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : ;".who"/"who",NULL,execlp
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("./who","who",NULL);]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("./who","who",NULL);
원본 정답 : execlp("who","who",0)
변형 학생 : ;".who"/"who",NULL,execlp
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("./who","who",NULL);]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("./who","who",NULL);
원본 정답 : execlp("who","who")
변형 학생 : ;".who"/"who",NULL,execlp
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execlp("./who","who",NULL);]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execlp("./who","who",NULL);
원본 정답 : execlp("who","who",NULL)
변형 학생 : ;".who"/"who",NULL,execlp
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execlp("./who","who",NULL);]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execlp("./who","who",NULL);
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : ;".who"/"who",NULL,execlp
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execlp("./who","who",NULL);]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execlp("./who","who",NULL);
원본 정답 : execlp("who","who",0);
변형 학생 : ;".who"/"who",NULL,execlp
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execlp("./who","who",NULL);]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execlp("./who","who",NULL);
원본 정답 : execlp("who","who");
변형 학생 : ;".who"/"who",NULL,execlp
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execlp("./who","who",NULL);]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execlp("./who","who",NULL);
원본 정답 : execlp("who","who",NULL);
변형 학생 : ;".who"/"who",NULL,execlp
변형 정답 : ;"who""who",NULL,execlp
20190016 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190016 / 3-2.txt : Attempt #1 / 2
정규화 전
학생 : [times(tms_start)==0]
정답 : [(start=times(&tms_start))==-1]
정규화 후
원본 학생 : times(tms_start)==0
원본 정답 : (start=times(&tms_start))==-1
변형 학생 : (0==_aeimmrssstttt
변형 정답 : &(-1===_aaeimmrrsssstttttt
Attempt #2 / 2
정규화 전
학생 : [times(tms_start)==0]
정답 : [(start=times(&tms_start))<0]
정규화 후
원본 학생 : times(tms_start)==0
원본 정답 : (start=times(&tms_start))<0
변형 학생 : (0==_aeimmrssstttt
변형 정답 : starttimes&tms_start(=0<
20190016 / 3-3.txt : Attempt #1 / 2
정규화 전
학생 : [times(tms_end)]
정답 : [(end=times(&tms_end))==-1]
정규화 후
원본 학생 : times(tms_end)
원본 정답 : (end=times(&tms_end))==-1
변형 학생 : timestms_end(
변형 정답 : &(-1===_ddeeeimmnnsstt
Attempt #2 / 2
정규화 전
학생 : [times(tms_end)]
정답 : [(end=times(&tms_end))<0]
정규화 후
원본 학생 : times(tms_end)
원본 정답 : (end=times(&tms_end))<0
변형 학생 : timestms_end(
변형 정답 : endtimes&tms_end(=0<
20190016 / 4-1.txt : Attempt #1 / 1
정규화 전
학생 : [include<pthread.h>]
정답 : [#include<pthread.h>]
정규화 후
원본 학생 : include<pthread.h>
원본 정답 : #include<pthread.h>
변형 학생 : includepthread.h<>
변형 정답 : #includepthread.h<>
20190016 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,&ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,&ssu_thread,NULL)!=0
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : !&&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
정규화 전
학생 : [pthread_create(&tid,NULL,&ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid,NULL,&ssu_thread,NULL)!=0
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
변형 학생 : !&&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tidNULL,ssu_thread,NULL,pthread_create0<
Attempt #3 / 4
단순비교
학생 : [pthread_create(&tid,NULL,&ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)!=0]
20190016 / 4-3.txt : Attempt #1 / 4
정규화 전
학생 : [tid=getppid();]
정답 : [tid=pthread_self()]
정규화 후
원본 학생 : tid=getppid();
원본 정답 : tid=pthread_self()
변형 학생 : getppid(;=tid
변형 정답 : tidpthread_self(=
Attempt #2 / 4
정규화 전
학생 : [tid=getppid();]
정답 : [tid=gettid()]
정규화 후
원본 학생 : tid=getppid();
원본 정답 : tid=gettid()
변형 학생 : getppid(;=tid
변형 정답 : tidgettid(=
Attempt #3 / 4
정규화 전
학생 : [tid=getppid();]
정답 : [tid=pthread_self();]
정규화 후
원본 학생 : tid=getppid();
원본 정답 : tid=pthread_self();
변형 학생 : getppid(;=tid
변형 정답 : pthread_self(;=tid
Attempt #4 / 4
정규화 전
학생 : [tid=getppid();]
정답 : [tid=gettid();]
정규화 후
원본 학생 : tid=getppid();
원본 정답 : tid=gettid();
변형 학생 : getppid(;=tid
변형 정답 : gettid(;=tid
20190016 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190016 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190016 / 5-2.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0
변형 학생 : !&&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
20190016 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
20190016 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190016 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190016 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190016 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190016 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190016 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190016 / 7-1.txt : Attempt #1 / 2
정규화 전
학생 : [STDIN_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
정규화 후
원본 학생 : STDIN_FILENO,O_NONBLOCK
원본 정답 : STDOUT_FILENO,O_NONBLOCK
변형 학생 : STDIN_FILENOO_NONBLOCK,
변형 정답 : STDOUT_FILENOO_NONBLOCK,
Attempt #2 / 2
정규화 전
학생 : [STDIN_FILENO,O_NONBLOCK]
정답 : [1,O_NONBLOCK]
정규화 후
원본 학생 : STDIN_FILENO,O_NONBLOCK
원본 정답 : 1,O_NONBLOCK
변형 학생 : STDIN_FILENOO_NONBLOCK,
변형 정답 : 1O_NONBLOCK,
20190016 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFl,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFl,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01===EFFGT_acdfflllntv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFl,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFl,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))==-1
변형 학생 : ,,-01===EFFGT_acdfflllntv
변형 정답 : ,,-01===EFFGLT_acdffllntv
20190016 / 7-3.txt : Attempt #1 / 4
정규화 전
학생 : [flags|=O_NONBLOCK]
정답 : [val|=flags]
정규화 후
원본 학생 : flags|=O_NONBLOCK
원본 정답 : val|=flags
변형 학생 : flagsO_NONBLOCK|=
변형 정답 : valflags|=
Attempt #2 / 4
정규화 전
학생 : [flags|=O_NONBLOCK]
정답 : [val=val|flags]
정규화 후
원본 학생 : flags|=O_NONBLOCK
원본 정답 : val=val|flags
변형 학생 : flagsO_NONBLOCK|=
변형 정답 : valaafgllsv|=
Attempt #3 / 4
정규화 전
학생 : [flags|=O_NONBLOCK]
정답 : [val|=flags;]
정규화 후
원본 학생 : flags|=O_NONBLOCK
원본 정답 : val|=flags;
변형 학생 : flagsO_NONBLOCK|=
변형 정답 : valflags;|=
Attempt #4 / 4
정규화 전
학생 : [flags|=O_NONBLOCK]
정답 : [val=val|flags;]
정규화 후
원본 학생 : flags|=O_NONBLOCK
원본 정답 : val=val|flags;
변형 학생 : flagsO_NONBLOCK|=
변형 정답 : val;aafgllsv|=
20190016 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(val,F_SETFL,flags)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(val,F_SETFL,flags)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1==EFFLST_aacffglllnstv
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
정규화 전
학생 : [fcntl(val,F_SETFL,flags)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
정규화 후
원본 학생 : fcntl(val,F_SETFL,flags)==-1
원본 정답 : fcntl(fd,F_SETFL,val)==-1
변형 학생 : ,,-1==EFFLST_aacffglllnstv
변형 정답 : ,,-1==EFFLST_acdffllntv
Attempt #3 / 3
정규화 전
학생 : [fcntl(val,F_SETFL,flags)==-1]
정답 : [(val=fcntl(fd,F_SETFL,0))<0]
정규화 후
원본 학생 : fcntl(val,F_SETFL,flags)==-1
원본 정답 : (val=fcntl(fd,F_SETFL,0))<0
변형 학생 : ,,-1==EFFLST_aacffglllnstv
변형 정답 : valfdF_SETFL,0,fcntl=0<
20190016 / 7-5.txt : Attempt #1 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags&=
Attempt #2 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #3 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags)]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags)
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&aafgllsv~=
Attempt #4 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val&=~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val&=~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val~flags;&=
Attempt #5 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&~flags;]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&~flags;
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;aafgllsv~=
Attempt #6 / 6
정규화 전
학생 : [val&=~O_NONBLOCK]
정답 : [val=val&(~flags);]
정규화 후
원본 학생 : val&=~O_NONBLOCK
원본 정답 : val=val&(~flags);
변형 학생 : val~O_NONBLOCK&=
변형 정답 : val&;afgls~=val
20190016 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,"rw",O_APPEND))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,"rw",O_APPEND))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filename"rw",O_APPEND,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,"rw",O_APPEND))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,"rw",O_APPEND))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filename"rw",O_APPEND,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,"rw",O_APPEND))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,"rw",O_APPEND))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filename"rw",O_APPEND,open=0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,"rw",O_APPEND))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,"rw",O_APPEND))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filename"rw",O_APPEND,open=0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,"rw",O_APPEND))<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,"rw",O_APPEND))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filename"rw",O_APPEND,open=0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190016 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [fnctl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : fnctl(fd1,F_SETFD,FD_CLOEXEC)==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
20190016 / 8-3.txt : Attempt #1 / 2
정규화 전
학생 : [flag&=O_APPEND]
정답 : [flag&O_APPEND]
정규화 후
원본 학생 : flag&=O_APPEND
원본 정답 : flag&O_APPEND
변형 학생 : flagO_APPEND&=
변형 정답 : &ADENOPP_afgl
Attempt #2 / 2
정규화 전
학생 : [flag&=O_APPEND]
정답 : [flag&O_APPEND==O_APPEND]
정규화 후
원본 학생 : flag&=O_APPEND
원본 정답 : flag&O_APPEND==O_APPEND
변형 학생 : flagO_APPEND&=
변형 정답 : &==AADDEENNOOPPPP__afgl
20190016 / 8-4.txt : Attempt #1 / 2
정규화 전
학생 : [flag&=FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
정규화 후
원본 학생 : flag&=FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC
변형 학생 : flagFD_CLOEXEC&=
변형 정답 : &CCDEEFLOX_afgl
Attempt #2 / 2
정규화 전
학생 : [flag&=FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC==FD_CLOEXEC]
정규화 후
원본 학생 : flag&=FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC==FD_CLOEXEC
변형 학생 : flagFD_CLOEXEC&=
변형 정답 : &==CCCCDDEEEEFFLLOOXX__afgl
20190016 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190016 / 9-2.txt : Attempt #1 / 1
정규화 전
학생 : [sigset]
정답 : [sigset_t]
정규화 후
원본 학생 : sigset
원본 정답 : sigset_t
변형 학생 : sigset
변형 정답 : sigset_t
20190016 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execv(]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execv(
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : execv(
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execv(]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execv(
원본 정답 : execv("find",args)<0
변형 학생 : execv(
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execv(]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execv(
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : execv(
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execv(]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execv(
원본 정답 : execv("find",args)==-1
변형 학생 : execv(
변형 정답 : "",-1==acdeefginrsvx
20190016 is finished..
Grading 20190017...
20190017 / 1-1.txt : Attempt #1 / 2
단순비교
학생 : [externchar**environ]
정답 : [externchar**environ]
20190017 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190017 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190017 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("date","date",0)
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("date","date")
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("date","date",NULL)
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("date","date",0);
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("date","date");
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("date","date",NULL);
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp("./date","date",(char*)0)]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp("./date","date",(char*)0)
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : 0execlpchar".date"/"date",*,
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190017 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("./who","where",(void*)0)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("./who","where",(void*)0)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : 0execlpvoid".who"/"where",*,
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("./who","where",(void*)0)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("./who","where",(void*)0)
원본 정답 : execlp("who","who",0)
변형 학생 : 0execlpvoid".who"/"where",*,
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("./who","where",(void*)0)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("./who","where",(void*)0)
원본 정답 : execlp("who","who")
변형 학생 : 0execlpvoid".who"/"where",*,
변형 정답 : "who""who",execlp
Attempt #4 / 8
정규화 전
학생 : [execlp("./who","where",(void*)0)]
정답 : [execlp("who","who",NULL)]
정규화 후
원본 학생 : execlp("./who","where",(void*)0)
원본 정답 : execlp("who","who",NULL)
변형 학생 : 0execlpvoid".who"/"where",*,
변형 정답 : "who""who",NULL,execlp
Attempt #5 / 8
정규화 전
학생 : [execlp("./who","where",(void*)0)]
정답 : [execlp("who","who",(char*)0);]
정규화 후
원본 학생 : execlp("./who","where",(void*)0)
원본 정답 : execlp("who","who",(char*)0);
변형 학생 : 0execlpvoid".who"/"where",*,
변형 정답 : ;0execlpchar"who""who",*,
Attempt #6 / 8
정규화 전
학생 : [execlp("./who","where",(void*)0)]
정답 : [execlp("who","who",0);]
정규화 후
원본 학생 : execlp("./who","where",(void*)0)
원본 정답 : execlp("who","who",0);
변형 학생 : 0execlpvoid".who"/"where",*,
변형 정답 : ;"who""who",0,execlp
Attempt #7 / 8
정규화 전
학생 : [execlp("./who","where",(void*)0)]
정답 : [execlp("who","who");]
정규화 후
원본 학생 : execlp("./who","where",(void*)0)
원본 정답 : execlp("who","who");
변형 학생 : 0execlpvoid".who"/"where",*,
변형 정답 : ;"who""who",execlp
Attempt #8 / 8
정규화 전
학생 : [execlp("./who","where",(void*)0)]
정답 : [execlp("who","who",NULL);]
정규화 후
원본 학생 : execlp("./who","where",(void*)0)
원본 정답 : execlp("who","who",NULL);
변형 학생 : 0execlpvoid".who"/"where",*,
변형 정답 : ;"who""who",NULL,execlp
20190017 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : !&(-1=aaisstttuw
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))<0]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))<0
변형 학생 : !&(-1=aaisstttuw
변형 정답 : pidwait&status(=0<
Attempt #3 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait(&status))>0]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait(&status))>0
변형 학생 : !&(-1=aaisstttuw
변형 정답 : 0pidwait&status(=<
Attempt #4 / 4
정규화 전
학생 : [wait(&status)!=-1]
정답 : [(pid=wait((int*)0))!=-1]
정규화 후
원본 학생 : wait(&status)!=-1
원본 정답 : (pid=wait((int*)0))!=-1
변형 학생 : !&(-1=aaisstttuw
변형 정답 : !*-01==adiiinpttw
20190017 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190017 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190017 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190017 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190017 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190017 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190017 / 5-3.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
20190017 / 5-4.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_join(pid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
정규화 후
원본 학생 : pthread_join(pid1,NULL)
원본 정답 : pthread_join(tid1,NULL)
변형 학생 : pid1NULL,pthread_join
변형 정답 : tid1NULL,pthread_join
Attempt #2 / 4
정규화 전
학생 : [pthread_join(pid1,NULL)]
정답 : [pthread_join(tid1,(void*)0)]
정규화 후
원본 학생 : pthread_join(pid1,NULL)
원본 정답 : pthread_join(tid1,(void*)0)
변형 학생 : pid1NULL,pthread_join
변형 정답 : 0pthread_join*1ddiiotv,
Attempt #3 / 4
정규화 전
학생 : [pthread_join(pid1,NULL)]
정답 : [pthread_join(tid1,NULL);]
정규화 후
원본 학생 : pthread_join(pid1,NULL)
원본 정답 : pthread_join(tid1,NULL);
변형 학생 : pid1NULL,pthread_join
변형 정답 : ;tid1NULL,pthread_join
Attempt #4 / 4
정규화 전
학생 : [pthread_join(pid1,NULL)]
정답 : [pthread_join(tid1,(void*)0);]
정규화 후
원본 학생 : pthread_join(pid1,NULL)
원본 정답 : pthread_join(tid1,(void*)0);
변형 학생 : pid1NULL,pthread_join
변형 정답 : ;0pthread_join*1ddiiotv,
20190017 / 6-1.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_mutex_tlock|=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정규화 후
원본 학생 : pthread_mutex_tlock|=PTHREAD_MUTEX_INITIALIZER
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
변형 학생 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER|=
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
Attempt #2 / 2
정규화 전
학생 : [pthread_mutex_tlock|=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
정규화 후
원본 학생 : pthread_mutex_tlock|=PTHREAD_MUTEX_INITIALIZER
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;
변형 학생 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER|=
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER;=
20190017 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190017 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190017 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190017 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190017 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190017 / 8-2.txt : Attempt #1 / 2
단순비교
학생 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
20190017 / 8-3.txt : Attempt #1 / 2
정규화 전
학생 : [fd1&O_APPEND]
정답 : [flag&O_APPEND]
정규화 후
원본 학생 : fd1&O_APPEND
원본 정답 : flag&O_APPEND
변형 학생 : &1ADENOPP_df
변형 정답 : &ADENOPP_afgl
Attempt #2 / 2
정규화 전
학생 : [fd1&O_APPEND]
정답 : [flag&O_APPEND==O_APPEND]
정규화 후
원본 학생 : fd1&O_APPEND
원본 정답 : flag&O_APPEND==O_APPEND
변형 학생 : &1ADENOPP_df
변형 정답 : &==AADDEENNOOPPPP__afgl
20190017 / 8-4.txt : Attempt #1 / 2
정규화 전
학생 : [fd1&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
정규화 후
원본 학생 : fd1&FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC
변형 학생 : &1CCDEEFLOX_df
변형 정답 : &CCDEEFLOX_afgl
Attempt #2 / 2
정규화 전
학생 : [fd1&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC==FD_CLOEXEC]
정규화 후
원본 학생 : fd1&FD_CLOEXEC
원본 정답 : flag&FD_CLOEXEC==FD_CLOEXEC
변형 학생 : &1CCDEEFLOX_df
변형 정답 : &==CCCCDDEEEEFFLLOOXX__afgl
20190017 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190017 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190017 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190017 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190017 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190017 / 9-6.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
20190017 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execv("/usr/bin/find",argv)==-1]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execv("/usr/bin/find",argv)==-1
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "",-///1==abcdeefgiinnrrsuvvx
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
정규화 전
학생 : [execv("/usr/bin/find",argv)==-1]
정답 : [execv("find",args)<0]
정규화 후
원본 학생 : execv("/usr/bin/find",argv)==-1
원본 정답 : execv("find",args)<0
변형 학생 : "",-///1==abcdeefgiinnrrsuvvx
변형 정답 : "find"args,execv0<
Attempt #3 / 4
정규화 전
학생 : [execv("/usr/bin/find",argv)==-1]
정답 : [execv("/usr/bin/find",args)==-1]
정규화 후
원본 학생 : execv("/usr/bin/find",argv)==-1
원본 정답 : execv("/usr/bin/find",args)==-1
변형 학생 : "",-///1==abcdeefgiinnrrsuvvx
변형 정답 : "",-///1==abcdeefgiinnrrssuvx
Attempt #4 / 4
정규화 전
학생 : [execv("/usr/bin/find",argv)==-1]
정답 : [execv("find",args)==-1]
정규화 후
원본 학생 : execv("/usr/bin/find",argv)==-1
원본 정답 : execv("find",args)==-1
변형 학생 : "",-///1==abcdeefgiinnrrsuvvx
변형 정답 : "",-1==acdeefginrsvx
20190017 / 10-3.txt : Attempt #1 / 1
단순비교
학생 : [WIFEXITED(stat)]
정답 : [WIFEXITED(stat)]
20190017 / 10-4.txt : Attempt #1 / 1
단순비교
학생 : [WIFSIGNALED(stat)]
정답 : [WIFSIGNALED(stat)]
20190017 is finished..
Grading 20190018...
20190018 / 1-1.txt : Attempt #1 / 2
정규화 전
학생 : [exturnchar**environ]
정답 : [externchar**environ]
정규화 후
원본 학생 : exturnchar**environ
원본 정답 : externchar**environ
변형 학생 : **aceehinnnorrrtuvx
변형 정답 : **aceeehinnnorrrtvx
Attempt #2 / 2
정규화 전
학생 : [exturnchar**environ]
정답 : [externchar*environ[]]
정규화 후
원본 학생 : exturnchar**environ
원본 정답 : externchar*environ[]
변형 학생 : **aceehinnnorrrtuvx
변형 정답 : *[]aceeehinnnorrrtvx
20190018 / 1-2.txt : Attempt #1 / 2
정규화 전
학생 : [char**envp]
정답 : [char*envp[]]
정규화 후
원본 학생 : char**envp
원본 정답 : char*envp[]
변형 학생 : **acehnprv
변형 정답 : *[]acehnprv
Attempt #2 / 2
단순비교
학생 : [char**envp]
정답 : [char**envp]
20190018 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190018 / 1-4.txt : Attempt #1 / 2
정규화 전
학생 : [putenv("WARNING=Don`tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정규화 후
원본 학생 : putenv("WARNING=Don`tuseenvpafterputenv()")
원본 정답 : putenv("WARNING=Don'tuseenvpafterputenv()")
변형 학생 : Don`tuseenvpafterputenv"="WARNINGputenv
변형 정답 : Don'tuseenvpafterputenv"="WARNINGputenv
Attempt #2 / 2
정규화 전
학생 : [putenv("WARNING=Don`tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()");]
정규화 후
원본 학생 : putenv("WARNING=Don`tuseenvpafterputenv()")
원본 정답 : putenv("WARNING=Don'tuseenvpafterputenv()");
변형 학생 : Don`tuseenvpafterputenv"="WARNINGputenv
변형 정답 : ;Don'tuseenvpafterputenv"="WARNINGputenv
20190018 / 1-5.txt : Attempt #1 / 1
단순비교
학생 : [getenv("WARNING")]
정답 : [getenv("WARNING")]
20190018 / 2-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<sys/wait.h>]
정답 : [#include<sys/wait.h>]
20190018 / 2-2.txt : Attempt #1 / 10
단순비교
학생 : [execlp("date","date",(char*)0)]
정답 : [execlp("date","date",(char*)0)]
20190018 / 2-3.txt : Attempt #1 / 8
단순비교
학생 : [execlp("who","who",(char*)0)]
정답 : [execlp("who","who",(char*)0)]
20190018 / 2-4.txt : Attempt #1 / 4
정규화 전
학생 : [(pid=wait(&status))<0]
정답 : [(pid=wait(&status))!=-1]
정규화 후
원본 학생 : (pid=wait(&status))<0
원본 정답 : (pid=wait(&status))!=-1
변형 학생 : pidwait&status(=0<
변형 정답 : !&(-1==aadiipsstttuw
Attempt #2 / 4
단순비교
학생 : [(pid=wait(&status))<0]
정답 : [(pid=wait(&status))<0]
20190018 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190018 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190018 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [(pid=fork())==0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : (pid=fork())==0
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : (0===dfikopr
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
정규화 전
학생 : [(pid=fork())==0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정규화 후
원본 학생 : (pid=fork())==0
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
변형 학생 : (0===dfikopr
변형 정답 : &tidNULL,ssu_thread,NULL,pthread_create0<
Attempt #3 / 4
정규화 전
학생 : [(pid=fork())==0]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)!=0]
정규화 후
원본 학생 : (pid=fork())==0
원본 정답 : pthread_create(&tid,NULL,&ssu_thread,NULL)!=0
변형 학생 : (0===dfikopr
변형 정답 : !&&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #4 / 4
정규화 전
학생 : [(pid=fork())==0]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)<0]
정규화 후
원본 학생 : (pid=fork())==0
원본 정답 : pthread_create(&tid,NULL,&ssu_thread,NULL)<0
변형 학생 : (0===dfikopr
변형 정답 : &tidNULL,&ssu_thread,NULL,pthread_create0<
20190018 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190018 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190018 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190018 / 5-2.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
변형 정답 : !&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
변형 정답 : !&&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
20190018 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
20190018 / 5-4.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_join(tid1,0)]
정답 : [pthread_join(tid1,NULL)]
정규화 후
원본 학생 : pthread_join(tid1,0)
원본 정답 : pthread_join(tid1,NULL)
변형 학생 : tid10,pthread_join
변형 정답 : tid1NULL,pthread_join
Attempt #2 / 4
정규화 전
학생 : [pthread_join(tid1,0)]
정답 : [pthread_join(tid1,(void*)0)]
정규화 후
원본 학생 : pthread_join(tid1,0)
원본 정답 : pthread_join(tid1,(void*)0)
변형 학생 : tid10,pthread_join
변형 정답 : 0pthread_join*1ddiiotv,
Attempt #3 / 4
정규화 전
학생 : [pthread_join(tid1,0)]
정답 : [pthread_join(tid1,NULL);]
정규화 후
원본 학생 : pthread_join(tid1,0)
원본 정답 : pthread_join(tid1,NULL);
변형 학생 : tid10,pthread_join
변형 정답 : ;tid1NULL,pthread_join
Attempt #4 / 4
정규화 전
학생 : [pthread_join(tid1,0)]
정답 : [pthread_join(tid1,(void*)0);]
정규화 후
원본 학생 : pthread_join(tid1,0)
원본 정답 : pthread_join(tid1,(void*)0);
변형 학생 : tid10,pthread_join
변형 정답 : ;0pthread_join*1ddiiotv,
20190018 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190018 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190018 / 6-3.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&lock)]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&lock)
변형 학생 : pthread_cond_signal&cond(
변형 정답 : &cond&lock,pthread_cond_wait
Attempt #2 / 4
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&lock);]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&lock);
변형 학생 : pthread_cond_signal&cond(
변형 정답 : ;&cond&lock,pthread_cond_wait
Attempt #3 / 4
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&mutex)]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&mutex)
변형 학생 : pthread_cond_signal&cond(
변형 정답 : &cond&mutex,pthread_cond_wait
Attempt #4 / 4
정규화 전
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_wait(&cond,&mutex);]
정규화 후
원본 학생 : pthread_cond_signal(&cond)
원본 정답 : pthread_cond_wait(&cond,&mutex);
변형 학생 : pthread_cond_signal&cond(
변형 정답 : ;&cond&mutex,pthread_cond_wait
20190018 / 6-5.txt : Attempt #1 / 2
정규화 전
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_signal(&cond)]
정규화 후
원본 학생 : pthread_cond_wait(&cond,&lock)
원본 정답 : pthread_cond_signal(&cond)
변형 학생 : &cond&lock,pthread_cond_wait
변형 정답 : pthread_cond_signal&cond(
Attempt #2 / 2
정규화 전
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_signal(&cond);]
정규화 후
원본 학생 : pthread_cond_wait(&cond,&lock)
원본 정답 : pthread_cond_signal(&cond);
변형 학생 : &cond&lock,pthread_cond_wait
변형 정답 : ;pthread_cond_signal&cond(
20190018 / 7-1.txt : Attempt #1 / 2
정규화 전
학생 : [STDOUT_FILENO,FD_CLOEXEC]
정답 : [STDOUT_FILENO,O_NONBLOCK]
정규화 후
원본 학생 : STDOUT_FILENO,FD_CLOEXEC
원본 정답 : STDOUT_FILENO,O_NONBLOCK
변형 학생 : STDOUT_FILENOFD_CLOEXEC,
변형 정답 : STDOUT_FILENOO_NONBLOCK,
Attempt #2 / 2
정규화 전
학생 : [STDOUT_FILENO,FD_CLOEXEC]
정답 : [1,O_NONBLOCK]
정규화 후
원본 학생 : STDOUT_FILENO,FD_CLOEXEC
원본 정답 : 1,O_NONBLOCK
변형 학생 : STDOUT_FILENOFD_CLOEXEC,
변형 정답 : 1O_NONBLOCK,
20190018 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFL,0))==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01===EFFGLT_acdffllntv
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
단순비교
학생 : [(val=fcntl(fd,F_GETFL,0))==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
20190018 / 7-3.txt : Attempt #1 / 4
정규화 전
학생 : [val|=FD_CLOEXEC]
정답 : [val|=flags]
정규화 후
원본 학생 : val|=FD_CLOEXEC
원본 정답 : val|=flags
변형 학생 : valFD_CLOEXEC|=
변형 정답 : valflags|=
Attempt #2 / 4
정규화 전
학생 : [val|=FD_CLOEXEC]
정답 : [val=val|flags]
정규화 후
원본 학생 : val|=FD_CLOEXEC
원본 정답 : val=val|flags
변형 학생 : valFD_CLOEXEC|=
변형 정답 : valaafgllsv|=
Attempt #3 / 4
정규화 전
학생 : [val|=FD_CLOEXEC]
정답 : [val|=flags;]
정규화 후
원본 학생 : val|=FD_CLOEXEC
원본 정답 : val|=flags;
변형 학생 : valFD_CLOEXEC|=
변형 정답 : valflags;|=
Attempt #4 / 4
정규화 전
학생 : [val|=FD_CLOEXEC]
정답 : [val=val|flags;]
정규화 후
원본 학생 : val|=FD_CLOEXEC
원본 정답 : val=val|flags;
변형 학생 : valFD_CLOEXEC|=
변형 정답 : val;aafgllsv|=
20190018 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,val)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-1==EFFLST_acdffllntv
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
단순비교
학생 : [fcntl(fd,F_SETFL,val)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
20190018 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190018 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_APPEND,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_APPEND,0644))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameO_APPEND,0644,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_APPEND,0644))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_APPEND,0644))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameO_APPEND,0644,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_APPEND,0644))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_APPEND,0644))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameO_APPEND,0644,open=0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,O_APPEND,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_APPEND,0644))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameO_APPEND,0644,open=0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,O_APPEND,0644))<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_APPEND,0644))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameO_APPEND,0644,open=0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190018 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190018 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190018 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190018 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190018 / 9-3.txt : Attempt #1 / 2
정규화 전
학생 : [sigempytset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
정규화 후
원본 학생 : sigempytset(&sig_set)
원본 정답 : sigemptyset(&sig_set)
변형 학생 : sigempytset&sig_set(
변형 정답 : sigemptyset&sig_set(
Attempt #2 / 2
정규화 전
학생 : [sigempytset(&sig_set)]
정답 : [sigemptyset(&sig_set);]
정규화 후
원본 학생 : sigempytset(&sig_set)
원본 정답 : sigemptyset(&sig_set);
변형 학생 : sigempytset&sig_set(
변형 정답 : ;sigemptyset&sig_set(
20190018 / 9-4.txt : Attempt #1 / 2
단순비교
학생 : [sigaddset(&sig_set,SIGINT)]
정답 : [sigaddset(&sig_set,SIGINT)]
20190018 / 9-5.txt : Attempt #1 / 2
단순비교
학생 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
20190018 / 9-6.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIG_NONBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIG_NONBLOCK,&sig_set,NULL)
원본 정답 : sigprocmask(SIG_UNBLOCK,&sig_set,NULL)
변형 학생 : SIG_NONBLOCK&sig_set,NULL,sigprocmask
변형 정답 : SIG_UNBLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
정규화 전
학생 : [sigprocmask(SIG_NONBLOCK,&sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL);]
정규화 후
원본 학생 : sigprocmask(SIG_NONBLOCK,&sig_set,NULL)
원본 정답 : sigprocmask(SIG_UNBLOCK,&sig_set,NULL);
변형 학생 : SIG_NONBLOCK&sig_set,NULL,sigprocmask
변형 정답 : ;SIG_UNBLOCK&sig_set,NULL,sigprocmask
20190018 / 10-1.txt : Attempt #1 / 4
정규화 전
학생 : [execv("find",args)<0]
정답 : [execv("/usr/bin/find",args)<0]
정규화 후
원본 학생 : execv("find",args)<0
원본 정답 : execv("/usr/bin/find",args)<0
변형 학생 : "find"args,execv0<
변형 정답 : "usr/bin/find"/args,execv0<
Attempt #2 / 4
단순비교
학생 : [execv("find",args)<0]
정답 : [execv("find",args)<0]
20190018 / 10-3.txt : Attempt #1 / 1
정규화 전
학생 : [WIFEXITED(&stat)]
정답 : [WIFEXITED(stat)]
정규화 후
원본 학생 : WIFEXITED(&stat)
원본 정답 : WIFEXITED(stat)
변형 학생 : WIFEXITED&stat(
변형 정답 : WIFEXITEDstat(
20190018 / 10-4.txt : Attempt #1 / 1
정규화 전
학생 : [WIFSIGNALED(&stat)]
정답 : [WIFSIGNALED(stat)]
정규화 후
원본 학생 : WIFSIGNALED(&stat)
원본 정답 : WIFSIGNALED(stat)
변형 학생 : WIFSIGNALED&stat(
변형 정답 : WIFSIGNALEDstat(
20190018 is finished..
Grading 20190019...
20190019 / 1-1.txt : Attempt #1 / 2
정규화 전
학생 : []
정답 : [externchar**environ]
정규화 후
원본 학생 : 
원본 정답 : externchar**environ
변형 학생 : (null)
변형 정답 : **aceeehinnnorrrtvx
20190019 / 1-2.txt : Attempt #1 / 2
정규화 전
학생 : [char**envpp[]]
정답 : [char*envp[]]
정규화 후
원본 학생 : char**envpp[]
원본 정답 : char*envp[]
변형 학생 : **[]acehnpprv
변형 정답 : *[]acehnprv
Attempt #2 / 2
정규화 전
학생 : [char**envpp[]]
정답 : [char**envp]
정규화 후
원본 학생 : char**envpp[]
원본 정답 : char**envp
변형 학생 : **[]acehnpprv
변형 정답 : **acehnprv
20190019 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<sys/stat.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<sys/stat.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includesysstat.h/<>
변형 정답 : #includesyswait.h/<>
20190019 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : "date""date",NULL,execlp
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date",0)
변형 학생 : "date""date",NULL,execlp
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp("date","date",NULL)
원본 정답 : execlp("date","date")
변형 학생 : "date""date",NULL,execlp
변형 정답 : "date""date",execlp
Attempt #4 / 10
단순비교
학생 : [execlp("date","date",NULL)]
정답 : [execlp("date","date",NULL)]
20190019 / 2-3.txt : Attempt #1 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",(char*)0)]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who",(char*)0)
변형 학생 : "who""who",NULL,execlp
변형 정답 : 0execlpchar"who""who",*,
Attempt #2 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",0)]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who",0)
변형 학생 : "who""who",NULL,execlp
변형 정답 : "who""who",0,execlp
Attempt #3 / 8
정규화 전
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who")]
정규화 후
원본 학생 : execlp("who","who",NULL)
원본 정답 : execlp("who","who")
변형 학생 : "who""who",NULL,execlp
변형 정답 : "who""who",execlp
Attempt #4 / 8
단순비교
학생 : [execlp("who","who",NULL)]
정답 : [execlp("who","who",NULL)]
20190019 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190019 / 4-2.txt : Attempt #1 / 4
단순비교
학생 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
20190019 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190019 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190019 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190019 / 5-2.txt : Attempt #1 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
20190019 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)==0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)==0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &,,,022==LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)==0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)==0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &,,,022==LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)==0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)==0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
변형 학생 : &,,,022==LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)==0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)==0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0
변형 학생 : &,,,022==LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create0<
Attempt #5 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)==0]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)==0
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)
변형 학생 : &,,,022==LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create
Attempt #6 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)==0]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)==0
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
변형 학생 : &,,,022==LLLLNNUU__aaacdddeeeehhiprrrssttttu
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create
20190019 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190019 / 6-1.txt : Attempt #1 / 2
정규화 전
학생 : [ptrhead_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정규화 후
원본 학생 : ptrhead_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
변형 학생 : ptrhead_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
Attempt #2 / 2
정규화 전
학생 : [ptrhead_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;]
정규화 후
원본 학생 : ptrhead_mutex_tlock=PTHREAD_MUTEX_INITIALIZER
원본 정답 : pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER;
변형 학생 : ptrhead_mutex_tlockPTHREAD_MUTEX_INITIALIZER=
변형 정답 : pthread_mutex_tlockPTHREAD_MUTEX_INITIALIZER;=
20190019 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190019 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190019 / 6-4.txt : Attempt #1 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP
원본 정답 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP2
변형 학생 : glo_valVALUE_STOP1<VALUE_STOPglo_val<||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<||
Attempt #2 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP]
정답 : [glo_val<3||glo_val>6]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP
원본 정답 : glo_val<3||glo_val>6
변형 학생 : glo_valVALUE_STOP1<VALUE_STOPglo_val<||
변형 정답 : glo_val3<6glo_val<||
Attempt #3 / 3
정규화 전
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP]
정답 : [glo_val<VALUE_STOP1|glo_val>VALUE_STOP2]
정규화 후
원본 학생 : glo_val<VALUE_STOP1||glo_val>VALUE_STOP
원본 정답 : glo_val<VALUE_STOP1|glo_val>VALUE_STOP2
변형 학생 : glo_valVALUE_STOP1<VALUE_STOPglo_val<||
변형 정답 : glo_valVALUE_STOP1<VALUE_STOP2glo_val<|
20190019 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190019 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [fcntl(fd,F_GETFL,0)==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : fcntl(fd,F_GETFL,0)==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : ,,-01==EFFGLT_cdfflnt
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
정규화 전
학생 : [fcntl(fd,F_GETFL,0)==-1]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
정규화 후
원본 학생 : fcntl(fd,F_GETFL,0)==-1
원본 정답 : (val=fcntl(fd,F_GETFL,0))==-1
변형 학생 : ,,-01==EFFGLT_cdfflnt
변형 정답 : ,,-01===EFFGLT_acdffllntv
20190019 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190019 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,0)==-1]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,0)==-1
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : ,,-01==EFFLST_cdfflnt
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,0)==-1]
정답 : [fcntl(fd,F_SETFL,val)==-1]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,0)==-1
원본 정답 : fcntl(fd,F_SETFL,val)==-1
변형 학생 : ,,-01==EFFLST_cdfflnt
변형 정답 : ,,-1==EFFLST_acdffllntv
Attempt #3 / 3
정규화 전
학생 : [fcntl(fd,F_SETFL,0)==-1]
정답 : [(val=fcntl(fd,F_SETFL,0))<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFL,0)==-1
원본 정답 : (val=fcntl(fd,F_SETFL,0))<0
변형 학생 : ,,-01==EFFLST_cdfflnt
변형 정답 : valfdF_SETFL,0,fcntl=0<
20190019 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190019 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190019 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [(fd2=fcntl(fd1,F_SETFD,0))==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : (fd2=fcntl(fd1,F_SETFD,0))==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : ,,-0112===DEFFST_cddffflnt
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
정규화 전
학생 : [(fd2=fcntl(fd1,F_SETFD,0))==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정규화 후
원본 학생 : (fd2=fcntl(fd1,F_SETFD,0))==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
변형 학생 : ,,-0112===DEFFST_cddffflnt
변형 정답 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
20190019 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190019 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190019 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190019 / 9-5.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIGINT,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIGINT,&sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL)
변형 학생 : SIGINT&sig_set,NULL,sigprocmask
변형 정답 : SIG_BLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
정규화 전
학생 : [sigprocmask(SIGINT,&sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL);]
정규화 후
원본 학생 : sigprocmask(SIGINT,&sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL);
변형 학생 : SIGINT&sig_set,NULL,sigprocmask
변형 정답 : ;SIG_BLOCK&sig_set,NULL,sigprocmask
20190019 / 10-3.txt : Attempt #1 / 1
정규화 전
학생 : [WEXITTERM(stat)]
정답 : [WIFEXITED(stat)]
정규화 후
원본 학생 : WEXITTERM(stat)
원본 정답 : WIFEXITED(stat)
변형 학생 : WEXITTERMstat(
변형 정답 : WIFEXITEDstat(
20190019 / 10-4.txt : Attempt #1 / 1
정규화 전
학생 : [WSIGTERM]
정답 : [WIFSIGNALED(stat)]
정규화 후
원본 학생 : WSIGTERM
원본 정답 : WIFSIGNALED(stat)
변형 학생 : WSIGTERM
변형 정답 : WIFSIGNALEDstat(
20190019 is finished..
Grading 20190020...
20190020 / 1-1.txt : Attempt #1 / 2
정규화 전
학생 : [extern**environ
[]]
정답 : [externchar**environ]
정규화 후
원본 학생 : extern**environ
[]
원본 정답 : externchar**environ
변형 학생 : **[]eeeinnnorrtvx||
변형 정답 : **aceeehinnnorrrtvx
Attempt #2 / 2
정규화 전
학생 : [extern**environ
[]]
정답 : [externchar*environ[]]
정규화 후
원본 학생 : extern**environ
[]
원본 정답 : externchar*environ[]
변형 학생 : **[]eeeinnnorrtvx||
변형 정답 : *[]aceeehinnnorrrtvx
20190020 / 1-2.txt : Attempt #1 / 2
단순비교
학생 : [char*envp[]]
정답 : [char*envp[]]
20190020 / 1-3.txt : Attempt #1 / 2
단순비교
학생 : [putenv("TZ=PST8PDT")]
정답 : [putenv("TZ=PST8PDT")]
20190020 / 1-4.txt : Attempt #1 / 2
단순비교
학생 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
정답 : [putenv("WARNING=Don'tuseenvpafterputenv()")]
20190020 / 1-5.txt : Attempt #1 / 1
정규화 전
학생 : [putenv("WARNING")]
정답 : [getenv("WARNING")]
정규화 후
원본 학생 : putenv("WARNING")
원본 정답 : getenv("WARNING")
변형 학생 : putenv"WARNING"(
변형 정답 : getenv"WARNING"(
20190020 / 2-1.txt : Attempt #1 / 1
정규화 전
학생 : [#include<sys/stat.h>]
정답 : [#include<sys/wait.h>]
정규화 후
원본 학생 : #include<sys/stat.h>
원본 정답 : #include<sys/wait.h>
변형 학생 : #includesysstat.h/<>
변형 정답 : #includesyswait.h/<>
20190020 / 2-2.txt : Attempt #1 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("date","date",(char*)0)]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("date","date",(char*)0)
변형 학생 : execlp(
변형 정답 : 0execlpchar"date""date",*,
Attempt #2 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("date","date",0)]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("date","date",0)
변형 학생 : execlp(
변형 정답 : "date""date",0,execlp
Attempt #3 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("date","date")]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("date","date")
변형 학생 : execlp(
변형 정답 : "date""date",execlp
Attempt #4 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("date","date",NULL)]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("date","date",NULL)
변형 학생 : execlp(
변형 정답 : "date""date",NULL,execlp
Attempt #5 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("/bin/date","date",NULL)]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("/bin/date","date",NULL)
변형 학생 : execlp(
변형 정답 : "bin/date"/"date",NULL,execlp
Attempt #6 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("date","date",(char*)0);]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("date","date",(char*)0);
변형 학생 : execlp(
변형 정답 : ;0execlpchar"date""date",*,
Attempt #7 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("date","date",0);]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("date","date",0);
변형 학생 : execlp(
변형 정답 : ;"date""date",0,execlp
Attempt #8 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("date","date");]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("date","date");
변형 학생 : execlp(
변형 정답 : ;"date""date",execlp
Attempt #9 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("date","date",NULL);]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("date","date",NULL);
변형 학생 : execlp(
변형 정답 : ;"date""date",NULL,execlp
Attempt #10 / 10
정규화 전
학생 : [execlp(]
정답 : [execlp("/bin/date","date",NULL);]
정규화 후
원본 학생 : execlp(
원본 정답 : execlp("/bin/date","date",NULL);
변형 학생 : execlp(
변형 정답 : ;"bin/date"/"date",NULL,execlp
20190020 / 3-1.txt : Attempt #1 / 1
단순비교
학생 : [structtms]
정답 : [structtms]
20190020 / 4-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190020 / 4-2.txt : Attempt #1 / 4
정규화 전
학생 : [pthread_creat(&tid,NULL,ssu_thread,NULL)]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_creat(&tid,NULL,ssu_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_creat
변형 정답 : !&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 4
정규화 전
학생 : [pthread_creat(&tid,NULL,ssu_thread,NULL)]
정답 : [pthread_create(&tid,NULL,ssu_thread,NULL)<0]
정규화 후
원본 학생 : pthread_creat(&tid,NULL,ssu_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,ssu_thread,NULL)<0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_creat
변형 정답 : &tidNULL,ssu_thread,NULL,pthread_create0<
Attempt #3 / 4
정규화 전
학생 : [pthread_creat(&tid,NULL,ssu_thread,NULL)]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)!=0]
정규화 후
원본 학생 : pthread_creat(&tid,NULL,ssu_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,&ssu_thread,NULL)!=0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_creat
변형 정답 : !&&,,,0=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #4 / 4
정규화 전
학생 : [pthread_creat(&tid,NULL,ssu_thread,NULL)]
정답 : [pthread_create(&tid,NULL,&ssu_thread,NULL)<0]
정규화 후
원본 학생 : pthread_creat(&tid,NULL,ssu_thread,NULL)
원본 정답 : pthread_create(&tid,NULL,&ssu_thread,NULL)<0
변형 학생 : &tidNULL,ssu_thread,NULL,pthread_creat
변형 정답 : &tidNULL,&ssu_thread,NULL,pthread_create0<
20190020 / 4-3.txt : Attempt #1 / 4
단순비교
학생 : [tid=pthread_self()]
정답 : [tid=pthread_self()]
20190020 / 4-4.txt : Attempt #1 / 1
단순비교
학생 : [-lpthread]
정답 : [-lpthread]
20190020 / 5-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<pthread.h>]
정답 : [#include<pthread.h>]
20190020 / 5-2.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create
변형 정답 : !&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)!=0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create
변형 정답 : !&&,,,011=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
원본 정답 : pthread_create(&tid1,NULL,ssu_thread1,NULL)<0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create
변형 정답 : &tid1NULL,ssu_thread1,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,&ssu_thread1,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid1,NULL,ssu_thread1,NULL)
원본 정답 : pthread_create(&tid1,NULL,&ssu_thread1,NULL)<0
변형 학생 : &tid1NULL,ssu_thread1,NULL,pthread_create
변형 정답 : &tid1NULL,&ssu_thread1,NULL,pthread_create0<
Attempt #5 / 6
단순비교
학생 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
정답 : [pthread_create(&tid1,NULL,ssu_thread1,NULL)]
20190020 / 5-3.txt : Attempt #1 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : !&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #2 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)!=0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : !&&,,,022=LLLLNNUU__aaacdddeeeehhiprrrssttttu
Attempt #3 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,ssu_thread2,NULL)<0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,ssu_thread2,NULL,pthread_create0<
Attempt #4 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)<0
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create0<
Attempt #5 / 6
정규화 전
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,&ssu_thread2,NULL)]
정규화 후
원본 학생 : pthread_create(&tid2,NULL,ssu_thread2,NULL)
원본 정답 : pthread_create(&tid2,NULL,&ssu_thread2,NULL)
변형 학생 : &tid2NULL,ssu_thread2,NULL,pthread_create
변형 정답 : &tid2NULL,&ssu_thread2,NULL,pthread_create
Attempt #6 / 6
단순비교
학생 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
정답 : [pthread_create(&tid2,NULL,ssu_thread2,NULL)]
20190020 / 5-4.txt : Attempt #1 / 4
단순비교
학생 : [pthread_join(tid1,NULL)]
정답 : [pthread_join(tid1,NULL)]
20190020 / 6-1.txt : Attempt #1 / 2
단순비교
학생 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
정답 : [pthread_mutex_tlock=PTHREAD_MUTEX_INITIALIZER]
20190020 / 6-2.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
정답 : [pthread_cond_tcond=PTHREAD_COND_INITIALIZER]
20190020 / 6-3.txt : Attempt #1 / 4
단순비교
학생 : [pthread_cond_wait(&cond,&lock)]
정답 : [pthread_cond_wait(&cond,&lock)]
20190020 / 6-4.txt : Attempt #1 / 3
단순비교
학생 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
정답 : [glo_val<VALUE_STOP1||glo_val>VALUE_STOP2]
20190020 / 6-5.txt : Attempt #1 / 2
단순비교
학생 : [pthread_cond_signal(&cond)]
정답 : [pthread_cond_signal(&cond)]
20190020 / 7-1.txt : Attempt #1 / 2
단순비교
학생 : [STDOUT_FILENO,O_NONBLOCK]
정답 : [STDOUT_FILENO,O_NONBLOCK]
20190020 / 7-2.txt : Attempt #1 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFD,0))<=0]
정답 : [(val=fcntl(fd,F_GETFL,0))<0]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFD,0))<=0
원본 정답 : (val=fcntl(fd,F_GETFL,0))<0
변형 학생 : valfdF_GETFD,0,fcntl=0<=
변형 정답 : valfdF_GETFL,0,fcntl=0<
Attempt #2 / 2
정규화 전
학생 : [(val=fcntl(fd,F_GETFD,0))<=0]
정답 : [(val=fcntl(fd,F_GETFL,0))==-1]
정규화 후
원본 학생 : (val=fcntl(fd,F_GETFD,0))<=0
원본 정답 : (val=fcntl(fd,F_GETFL,0))==-1
변형 학생 : valfdF_GETFD,0,fcntl=0<=
변형 정답 : ,,-01===EFFGLT_acdffllntv
20190020 / 7-3.txt : Attempt #1 / 4
단순비교
학생 : [val|=flags]
정답 : [val|=flags]
20190020 / 7-4.txt : Attempt #1 / 3
정규화 전
학생 : [fcntl(fd,F_SETFD,val)]
정답 : [fcntl(fd,F_SETFL,val)<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFD,val)
원본 정답 : fcntl(fd,F_SETFL,val)<0
변형 학생 : fdF_SETFD,val,fcntl
변형 정답 : fdF_SETFL,val,fcntl0<
Attempt #2 / 3
정규화 전
학생 : [fcntl(fd,F_SETFD,val)]
정답 : [fcntl(fd,F_SETFL,val)==-1]
정규화 후
원본 학생 : fcntl(fd,F_SETFD,val)
원본 정답 : fcntl(fd,F_SETFL,val)==-1
변형 학생 : fdF_SETFD,val,fcntl
변형 정답 : ,,-1==EFFLST_acdffllntv
Attempt #3 / 3
정규화 전
학생 : [fcntl(fd,F_SETFD,val)]
정답 : [(val=fcntl(fd,F_SETFL,0))<0]
정규화 후
원본 학생 : fcntl(fd,F_SETFD,val)
원본 정답 : (val=fcntl(fd,F_SETFL,0))<0
변형 학생 : fdF_SETFD,val,fcntl
변형 정답 : valfdF_SETFL,0,fcntl=0<
20190020 / 7-5.txt : Attempt #1 / 6
단순비교
학생 : [val&=~flags]
정답 : [val&=~flags]
20190020 / 8-1.txt : Attempt #1 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,0644,open=0<
Attempt #2 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameADDENOOPPRRW__|,open=0<
Attempt #3 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_APPEND|O_RDWR))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_APPEND|O_RDWR))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,-11===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #4 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_APPEND,0644))==-1]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_APPEND,0644))==-1
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : ,,-011446===ADDENOOPPRRW__adeeeffilmnnop|
Attempt #5 / 5
정규화 전
학생 : [(fd1=open(filename,O_RDWR))<0]
정답 : [(fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0]
정규화 후
원본 학생 : (fd1=open(filename,O_RDWR))<0
원본 정답 : (fd1=open(filename,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,0644))<0
변형 학생 : fd1filenameO_RDWR,open=0<
변형 정답 : fd1filenameAACCDDEENNOOOOPPRRRRTTUW____|||,0644,open=0<
20190020 / 8-2.txt : Attempt #1 / 2
정규화 전
학생 : [(flag=fcntl(fd1,F_GETFL,0))==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1]
정규화 후
원본 학생 : (flag=fcntl(fd1,F_GETFL,0))==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)==-1
변형 학생 : ,,-011===EFFGLT_acdfffgllnt
변형 정답 : ,,-11==CCDDEEEFFFLOSTX__cdfflnt
Attempt #2 / 2
정규화 전
학생 : [(flag=fcntl(fd1,F_GETFL,0))==-1]
정답 : [fcntl(fd1,F_SETFD,FD_CLOEXEC)<0]
정규화 후
원본 학생 : (flag=fcntl(fd1,F_GETFL,0))==-1
원본 정답 : fcntl(fd1,F_SETFD,FD_CLOEXEC)<0
변형 학생 : ,,-011===EFFGLT_acdfffgllnt
변형 정답 : fd1F_SETFD,FD_CLOEXEC,fcntl0<
20190020 / 8-3.txt : Attempt #1 / 2
단순비교
학생 : [flag&O_APPEND]
정답 : [flag&O_APPEND]
20190020 / 8-4.txt : Attempt #1 / 2
단순비교
학생 : [flag&FD_CLOEXEC]
정답 : [flag&FD_CLOEXEC]
20190020 / 9-1.txt : Attempt #1 / 1
단순비교
학생 : [#include<signal.h>]
정답 : [#include<signal.h>]
20190020 / 9-2.txt : Attempt #1 / 1
단순비교
학생 : [sigset_t]
정답 : [sigset_t]
20190020 / 9-3.txt : Attempt #1 / 2
단순비교
학생 : [sigemptyset(&sig_set)]
정답 : [sigemptyset(&sig_set)]
20190020 / 9-4.txt : Attempt #1 / 2
정규화 전
학생 : [sigaddset(&sig_set,SIG)]
정답 : [sigaddset(&sig_set,SIGINT)]
정규화 후
원본 학생 : sigaddset(&sig_set,SIG)
원본 정답 : sigaddset(&sig_set,SIGINT)
변형 학생 : &sig_setSIG,sigaddset
변형 정답 : &sig_setSIGINT,sigaddset
Attempt #2 / 2
정규화 전
학생 : [sigaddset(&sig_set,SIG)]
정답 : [sigaddset(&sig_set,SIGINT);]
정규화 후
원본 학생 : sigaddset(&sig_set,SIG)
원본 정답 : sigaddset(&sig_set,SIGINT);
변형 학생 : &sig_setSIG,sigaddset
변형 정답 : ;&sig_setSIGINT,sigaddset
20190020 / 9-5.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIG_SETMASK,sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIG_SETMASK,sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL)
변형 학생 : SIG_SETMASKsig_set,NULL,sigprocmask
변형 정답 : SIG_BLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
정규화 전
학생 : [sigprocmask(SIG_SETMASK,sig_set,NULL)]
정답 : [sigprocmask(SIG_BLOCK,&sig_set,NULL);]
정규화 후
원본 학생 : sigprocmask(SIG_SETMASK,sig_set,NULL)
원본 정답 : sigprocmask(SIG_BLOCK,&sig_set,NULL);
변형 학생 : SIG_SETMASKsig_set,NULL,sigprocmask
변형 정답 : ;SIG_BLOCK&sig_set,NULL,sigprocmask
20190020 / 9-6.txt : Attempt #1 / 2
정규화 전
학생 : [sigprocmask(SIG_UNBLOCK,sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL)]
정규화 후
원본 학생 : sigprocmask(SIG_UNBLOCK,sig_set,NULL)
원본 정답 : sigprocmask(SIG_UNBLOCK,&sig_set,NULL)
변형 학생 : SIG_UNBLOCKsig_set,NULL,sigprocmask
변형 정답 : SIG_UNBLOCK&sig_set,NULL,sigprocmask
Attempt #2 / 2
정규화 전
학생 : [sigprocmask(SIG_UNBLOCK,sig_set,NULL)]
정답 : [sigprocmask(SIG_UNBLOCK,&sig_set,NULL);]
정규화 후
원본 학생 : sigprocmask(SIG_UNBLOCK,sig_set,NULL)
원본 정답 : sigprocmask(SIG_UNBLOCK,&sig_set,NULL);
변형 학생 : SIG_UNBLOCKsig_set,NULL,sigprocmask
변형 정답 : ;SIG_UNBLOCK&sig_set,NULL,sigprocmask
20190020 is finished..
Runtime : 111:829564(sec:usec)
